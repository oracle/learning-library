{"paragraphs":[{"text":"%md\n# Demonstration: Citi Bike New York - Working Spark and Maps\n\nThis tutorial was built for BDCS-CE version 17.3.1. If you are using a later version of BDCS-CE, there may be a newer version of this tutorial notebook at <https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake> . Questions and feedback about the tutorial: david.bayard@oracle.com\n\n\n    Be sure to have completed the previous Tutorial: \"Working with Spark Interpreter\"\n\n\nThis tutorial will illustrate how to display Spark data on Maps inside your Zeppelin Notebook.\n\n**Contents**\n\n+ About Displaying Maps in Zeppelin\n+ Our first map - Top 10 Pickup Stations\n+ A more complex example - Top Pickup and Dropoff locations for certain times of day\n+ Next Steps \n\n\nAs a reminder, the documentation for BDCS-CE can be found here: <http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html>\n\n","user":"anonymous","dateUpdated":"2017-07-28T13:47:26+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Demonstration: Citi Bike New York - Working Spark and Maps</h1>\n<p>This tutorial was built for BDCS-CE version 17.3.1. If you are using a later version of BDCS-CE, there may be a newer version of this tutorial notebook at <a href=\"https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake\">https://github.com/oracle/learning-library/tree/master/workshops/journey2-new-data-lake</a> . Questions and feedback about the tutorial: <a href=\"mailto:&#100;a&#118;&#x69;&#x64;&#x2e;&#x62;&#97;&#x79;&#x61;r&#100;&#x40;&#111;r&#97;&#99;&#108;e&#46;c&#x6f;&#109;\">&#100;a&#118;&#x69;&#x64;&#x2e;&#x62;&#97;&#x79;&#x61;r&#100;&#x40;&#111;r&#97;&#99;&#108;e&#46;c&#x6f;&#109;</a></p>\n<pre><code>Be sure to have completed the previous Tutorial: &quot;Working with Spark Interpreter&quot;\n</code></pre>\n<p>This tutorial will illustrate how to display Spark data on Maps inside your Zeppelin Notebook.</p>\n<p><strong>Contents</strong></p>\n<ul>\n  <li>About Displaying Maps in Zeppelin</li>\n  <li>Our first map - Top 10 Pickup Stations</li>\n  <li>A more complex example - Top Pickup and Dropoff locations for certain times of day</li>\n  <li>Next Steps</li>\n</ul>\n<p>As a reminder, the documentation for BDCS-CE can be found here: <a href=\"http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html\">http://docs.oracle.com/cloud/latest/big-data-compute-cloud/index.html</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273425_-1273096917","id":"20170417-105122_1170548028","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:47:26+0000","dateFinished":"2017-07-28T13:47:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:390"},{"text":"%md\n# About Displaying Maps in Zeppelin\n\nThis example will plot our top bike pickup/dropoff stations on a map.  To do so, \n\n + We'll use Spark code to gather the data that we will use to define specific markers to add to our map.  We will bind this marker data to a named angular variable.  Angular (<https://angularjs.org/>) is the framework that Zeppelin uses for its UI.\n + Then we will create a %angular paragraph to hold some custom HTML/javascript code.  This is the paragraph that will display the map.  Our code will use the javascript Leaflet project (<http://leafletjs.com/examples/quick-start/>) to create an html/javascript map object.  As part of our javascript, we'll instruct it to listen for changes to our named angular variable that we are populating in our spark paragraph.  When the angular variable changes, our code will re-draw the markers on the map.\n\nThis approach is derived from examples on the internet, such as <https://gist.github.com/granturing/a09aed4a302a7367be92> or <https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html>, that are all based on a similar approach.  \n\n","user":"anonymous","dateUpdated":"2017-07-28T13:32:39+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>About Displaying Maps in Zeppelin</h1>\n<p>This example will plot our top bike pickup/dropoff stations on a map. To do so, </p>\n<ul>\n  <li>We&rsquo;ll use Spark code to gather the data that we will use to define specific markers to add to our map. We will bind this marker data to a named angular variable. Angular (<a href=\"https://angularjs.org/\">https://angularjs.org/</a>) is the framework that Zeppelin uses for its UI.</li>\n  <li>Then we will create a %angular paragraph to hold some custom HTML/javascript code. This is the paragraph that will display the map. Our code will use the javascript Leaflet project (<a href=\"http://leafletjs.com/examples/quick-start/\">http://leafletjs.com/examples/quick-start/</a>) to create an html/javascript map object. As part of our javascript, we&rsquo;ll instruct it to listen for changes to our named angular variable that we are populating in our spark paragraph. When the angular variable changes, our code will re-draw the markers on the map.</li>\n</ul>\n<p>This approach is derived from examples on the internet, such as <a href=\"https://gist.github.com/granturing/a09aed4a302a7367be92\">https://gist.github.com/granturing/a09aed4a302a7367be92</a> or <a href=\"https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html\">https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html</a>, that are all based on a similar approach.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273426_-1271942670","id":"20170417-105338_670377766","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:32:39+0000","dateFinished":"2017-07-28T13:32:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:391"},{"text":"%md\n# Our First Map - Top 10 Pickup Stations\n\nTo get started, we will plot the 10 top pickup stations on a map.  We will have 1 paragraph which will use Spark and Spark SQL to query our bike_trips table and save the results into an angular variable.  And we will have 1 paragraph that contains the html/javascript to display our map. \n\n+ Run the \"Spark code for our first map\" to gather the data for our map,\n+ Then run the \"HTML/Javascript for our first map\" to display the map with the selected data\n","user":"anonymous","dateUpdated":"2017-07-28T13:32:20+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Our First Map - Top 10 Pickup Stations</h1>\n<p>To get started, we will plot the 10 top pickup stations on a map. We will have 1 paragraph which will use Spark and Spark SQL to query our bike_trips table and save the results into an angular variable. And we will have 1 paragraph that contains the html/javascript to display our map. </p>\n<ul>\n  <li>Run the &ldquo;Spark code for our first map&rdquo; to gather the data for our map,</li>\n  <li>Then run the &ldquo;HTML/Javascript for our first map&rdquo; to display the map with the selected data</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273426_-1271942670","id":"20170503-131132_2108800226","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:22:17+0000","dateFinished":"2017-07-28T13:22:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:392"},{"title":"Spark code for our first map","text":"%spark\n\n//Be sure to have run the \"Working Spark Interpreter\" tutorial in our zeppelen session prior to running this as this assumes that the bike_trips_temp table is part of your current session\n\n//Define a class for the structure of the data we will be passing to the map javascript code\ncase class Stations(ridetype: String, station: String, trips: String, lat: Double, lon: Double)\n\n//Unbind angular variable in case it already exists from previous run\nz.angularUnbind(\"topstations\") \n\n//Define a new dataframe based off a query\nval topstationsDF = sqlContext.sql(s\"\"\"select \"Start\" ridetype, `Start Station Name` station,`Start Station Latitude` lat,`Start Station Longitude` lon, count(*) trips from bike_trips_temp \ngroup by `Start Station Name`,`Start Station Latitude`,`Start Station Longitude`\norder by count(*) desc limit 10\"\"\")\n\n\n//Map the DF into an Array of Stations\nvar items = topstationsDF.map(b => Stations(b(0).toString, b(1).toString, \"Pickups:\"+b(4).toString, b(2).toString.toDouble, b(3).toString.toDouble)).collect\n\n//Bind the TopStations (as an Array) to an Angular variable named topstations\nz.angularBind(\"topstations\", items) \n\nprintln(\"..\")\nprintln(\"done\")","user":"anonymous","dateUpdated":"2017-07-28T13:27:07+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1501203273426_-1271942670","id":"20170503-131343_1494967819","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:27:07+0000","dateFinished":"2017-07-28T13:27:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:393"},{"title":"HTML/Javascript for our first map","text":"%angular\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"firstmap\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('firstmap', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#firstmap').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('topstations', function(newValue, oldValue) {\n\n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(station) {\n                var marker = L.marker([station.lat, station.lon])\n                marker.addTo(geoMarkers);  \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n","user":"anonymous","dateUpdated":"2017-07-28T13:27:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"editOnDblClick":"true"},"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1501203273427_-1272327419","id":"20170503-131701_402773641","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:27:12+0000","dateFinished":"2017-07-28T13:27:12+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:394"},{"text":"%md\n# A more complex example - Top Pickup and Dropoff locations for certain times of day\n\nNow that we have shown a simple example of a map, we will show a more complex example using a parameter-driven query with multiple map markers and layers.\n\nTo run this example:\n\n- Use the Query Parameters paragraph to choose the time frame for the query as well as how many of the Top pickup and dropoff stations to show on the map.\n- Then run the Query Parameters paragraph.  This will query the desired data (by automatically running the \"Spark code for the more complex map\" paragraph)\n- Once the data has been queried (takes about 20 seconds), the \"More Complex Map\" will be updated.  If the map is not showing, then play the \"More Complex Map\" paragraph to make it visible.\n-- Pickups are drawn in green.  Dropoffs are in red.\n-- Use the layers control in the upper right of the map to show/hide pickup and dropoff stations.\n-- The size of the circle on the map represents the number of pickups/dropoffs for that station during the selected time frame.","user":"anonymous","dateUpdated":"2017-07-28T13:45:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>A more complex example - Top Pickup and Dropoff locations for certain times of day</h1>\n<p>Now that we have shown a simple example of a map, we will show a more complex example using a parameter-driven query with multiple map markers and layers.</p>\n<p>To run this example:</p>\n<ul>\n  <li>Use the Query Parameters paragraph to choose the time frame for the query as well as how many of the Top pickup and dropoff stations to show on the map.</li>\n  <li>Then run the Query Parameters paragraph. This will query the desired data (by automatically running the &ldquo;Spark code for the more complex map&rdquo; paragraph)</li>\n  <li>Once the data has been queried (takes about 20 seconds), the &ldquo;More Complex Map&rdquo; will be updated. If the map is not showing, then play the &ldquo;More Complex Map&rdquo; paragraph to make it visible.<br/>&ndash; Pickups are drawn in green. Dropoffs are in red.<br/>&ndash; Use the layers control in the upper right of the map to show/hide pickup and dropoff stations.<br/>&ndash; The size of the circle on the map represents the number of pickups/dropoffs for that station during the selected time frame.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273427_-1272327419","id":"20170417-105353_594935006","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:45:56+0000","dateFinished":"2017-07-28T13:45:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:395"},{"title":"Query Parameters (change these drop-downs, then run the paragraph and it will automatically requery the data)","text":"%spark\nz.angularBind(\"BIND_topN\", z.select(\"Top N\",\"10\",Seq((\"5\",\"5\"),(\"10\",\"10\"),(\"20\",\"20\"),(\"50\",\"50\"),(\"100\",\"100\"))))\nz.angularBind(\"BIND_dayOfWeek\", z.select(\"dayOfWeek\", \"All\", Seq((\"All\", \"All\"),\n                         (\"MonFri\", \"Mon-Fri\"), (\"SatSun\",\"Weekend\")))  )\nz.angularBind(\"BIND_hourOfDay\", z.select(\"hourOfDay\", \"All\", Seq((\"All\", \"All\"),\n                         (\"Morning\", \"7am to 10am\"), (\"Midday\",\"11am to 3pm\"),(\"Afternoon\",\"4pm to 7pm\"),\n                         (\"Evening\",\"8pm to 11pm\"),(\"LateNite\",\"12am to 6am\")))  )\n                         \nz.run(\"20170417-105408_1898939870\")                         \n\t\t\t\t\t\t ","user":"anonymous","dateUpdated":"2017-07-28T13:46:33+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"results":[],"enabled":true,"editorSetting":{}},"settings":{"params":{"Top N":"10","hourOfDay":"Morning","dayOfWeek":"MonFri"},"forms":{"Top N":{"name":"Top N","displayName":"Top N","type":"select","defaultValue":"10","options":[{"value":"5","displayName":"5","$$hashKey":"object:1957"},{"value":"10","displayName":"10","$$hashKey":"object:1958"},{"value":"20","displayName":"20","$$hashKey":"object:1959"},{"value":"50","displayName":"50","$$hashKey":"object:1960"},{"value":"100","displayName":"100","$$hashKey":"object:1961"}],"hidden":false,"$$hashKey":"object:1932"},"dayOfWeek":{"name":"dayOfWeek","displayName":"dayOfWeek","type":"select","defaultValue":"All","options":[{"value":"All","displayName":"All","$$hashKey":"object:1942"},{"value":"MonFri","displayName":"Mon-Fri","$$hashKey":"object:1943"},{"value":"SatSun","displayName":"Weekend","$$hashKey":"object:1944"}],"hidden":false,"$$hashKey":"object:1930"},"hourOfDay":{"name":"hourOfDay","displayName":"hourOfDay","type":"select","defaultValue":"All","options":[{"value":"All","displayName":"All","$$hashKey":"object:1948"},{"value":"Morning","displayName":"7am to 10am","$$hashKey":"object:1949"},{"value":"Midday","displayName":"11am to 3pm","$$hashKey":"object:1950"},{"value":"Afternoon","displayName":"4pm to 7pm","$$hashKey":"object:1951"},{"value":"Evening","displayName":"8pm to 11pm","$$hashKey":"object:1952"},{"value":"LateNite","displayName":"12am to 6am","$$hashKey":"object:1953"}],"hidden":false,"$$hashKey":"object:1931"}}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1501203273427_-1272327419","id":"20170503-133356_1547039862","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:46:33+0000","dateFinished":"2017-07-28T13:46:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:396"},{"title":"Spark code for the more complex map","text":"%spark\n\n//Define a class for the structure of the data we will be passing to the map javascript code\ncase class Stations(ridetype: String, station: String, trips: String, lat: Double, lon: Double, radius: Double)\n\nz.angularUnbind(\"stations\")\n\n{\n//Be sure to have run Part 1 prior to running this as this assumes that the bike_trips table is part of your current session\n\n//Define some UI widgets for data selection parameters\n// Learn more here: https://zeppelin.apache.org/docs/0.6.1/interpreter/spark.html#form-creation\n\n\n//Use our UI values to define custom SQL\nvar limitString = \" limit \"+z.angular(\"BIND_topN\")\nvar whereString = \" where 1=1 \"\n\nif (z.angular(\"BIND_dayOfWeek\")==\"MonFri\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"E\") in (\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\") \"\"\"\n} else if (z.angular(\"BIND_dayOfWeek\")==\"SatSun\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"E\") in (\"Sat\",\"Sun\") \"\"\"\n}\n\nif (z.angular(\"BIND_hourOfDay\")==\"Morning\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"7\",\"8\",\"9\",\"10\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Midday\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"11\",\"12\",\"13\",\"14\",\"15\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Afternoon\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"16\",\"17\",\"18\",\"19\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"Evening\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"20\",\"21\",\"22\",\"23\") \"\"\"\n} else if (z.angular(\"BIND_hourOfDay\")==\"LateNite\") {\n    whereString = whereString+ s\"\"\" AND date_format(`Start Time`,\"H\") in (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\") \"\"\"\n}\n\nprintln(\"WHERE STRING: \"+whereString)\n\n//Define a new dataframe based off a query\nvar stations = sqlContext.sql(s\"\"\"select \"Start\" ridetype, `Start Station Name` station,`Start Station Latitude` lat,`Start Station Longitude` lon, count(*) trips from bike_trips_temp \"\"\" +\nwhereString + s\"\"\"\ngroup by `Start Station Name`,`Start Station Latitude`,`Start Station Longitude`\norder by count(*) desc \"\"\" + limitString)\n\n\n//Map the DF into an Array of Stations\nvar items1 = stations.map(b => Stations(b(0).toString, b(1).toString, \"Pickups:\"+b(4).toString, b(2).toString.toDouble, b(3).toString.toDouble,  b(4).toString.toDouble/8 )).collect\n\n\n\n//now do the same for top ending stations\nstations = sqlContext.sql(s\"\"\"select \"End\" ridetype, `End Station Name` station,`End Station Latitude` lat,`End Station Longitude` lon, count(*) trips from bike_trips_temp \"\"\" +\nwhereString + s\"\"\"\ngroup by `End Station Name`,`End Station Latitude`,`End Station Longitude`\norder by count(*) desc \"\"\" + limitString)\n\t\n//Map the DF into an Array of Stations.  Offset the lat,lon by a bit so you see both Start and End markers\nvar items2 = stations.map(b => Stations(b(0).toString, b(1).toString, \"Dropoffs:\"+b(4).toString, b(2).toString.toDouble+0.0001, b(3).toString.toDouble+0.0001, b(4).toString.toDouble/8)).collect\n\n//combine the two arrays\nval combined=items1 ++ items2\n\n//Bind the Stations to an Angular variable named stations\nz.angularBind(\"stations\", combined) \n\nprintln(\"done\")\n}\n","user":"anonymous","dateUpdated":"2017-07-28T13:46:13+0000","config":{"tableHide":false,"colWidth":6,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{"Top N":"20","hourOfDay":"Afternoon","dayOfWeek":"MonFri"},"forms":{}},"apps":[],"jobName":"paragraph_1501203273428_-1274251164","id":"20170417-105408_1898939870","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:46:34+0000","dateFinished":"2017-07-28T13:46:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:397"},{"title":"More Complex Map","text":"%angular\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.css\" />\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\n\n//based on https://gist.github.com/granturing/a09aed4a302a7367be92, https://community.hortonworks.com/articles/90320/add-leaflet-map-to-zeppelin-notebook.html, etc\n\nfunction initMap() {\n    //open up a map around NYC at zoom level 13\n    var map = L.map('map', {preferCanvas: true}).setView([40.75, -73.99], 13);\n\n    //define the background tile layer using OpenStreet maps.  Leaflet can work with other providers, too\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 16,\n        minZoom: 11\n    }).addTo(map);\n\n    //define a new LayerGroup which will hold our markers\n    var startMarkers = L.layerGroup().addTo(map);\n    var endMarkers = L.layerGroup().addTo(map);\n\n    var overlayMaps = {\n    \"Top Pickup Stations\": startMarkers,\n    \"Top Dropoff Stations\": endMarkers\n    };\n    \n    //add a Control to the map to let the user click the Marker layer off and on\n    L.control.layers(null, overlayMaps).addTo(map);\n    \n    // keep track of our markers, so we can remove them later\n    var markers = new Array();\n    \n    // setup a custom icon for markers. See https://github.com/pointhi/leaflet-color-markers\n    var greenIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n    \n    var redIcon = new L.Icon({\n      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n      iconSize: [12, 20],\n      iconAnchor: [6, 20],\n      popupAnchor: [1, -17],\n      shadowSize: [20, 20]\n    });\n\n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        \n        //listen for changes to the angular variable called stations\n        window.locationWatcher = el.scope().compiledScope.$watch('stations', function(newValue, oldValue) {\n             //startMarkers.clearLayers(); -- this did not work for me, so I use the for loop below to delete old markers\n            for(i=0;i<markers.length;i++) {\n               startMarkers.removeLayer(markers[i]);\n               endMarkers.removeLayer(markers[i]);\n               map.removeLayer(markers[i]);\n            }  \n            //now empty our array and start again\n            markers = new Array();\n            \n            //loop through each entry in our stations variable and add it as a marker\n            angular.forEach(newValue, function(bikes) {\n                var marker = L.marker([bikes.lat, bikes.lon], {icon: greenIcon})\n                    .bindPopup(\"<b>\" + bikes.station + \"</b><br>\" + bikes.trips)\n                var circle = L.circle([bikes.lat, bikes.lon], bikes.radius,{\n                       color: 'green',\n                       fillColor: '#5f0',\n                       fillOpacity: 0.5 })\n                   \n                if (bikes.ridetype==\"End\") {\n                    marker.setIcon(redIcon)\n                    marker.addTo(endMarkers)\n                    circle.setStyle({\n                       color: 'red',\n                       fillColor: '#f03',\n                       fillOpacity: 0.5 })\n                    circle.addTo(endMarkers)\n                } else {\n                    marker.addTo(startMarkers);  \n                    circle.addTo(startMarkers);  \n                }\n                markers.push(circle);   \n                markers.push(marker);   \n\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.3/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>\n","user":"anonymous","dateUpdated":"2017-07-28T13:46:21+0000","config":{"colWidth":6,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1501203273428_-1274251164","id":"20170417-140731_1761253993","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:27:39+0000","dateFinished":"2017-07-28T13:27:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:398"},{"text":"%md\n# Before you continue\n\nExperiment with the drop-down choices above.  For instance, compare Mon-Fri/7am-10am to Mon-Fri/4pm-7pm.  Do you see a difference between where bikes are being picked up (green) and dropped off (red)?\n\nOr compare Mon-Fri/7am-10am to Weekend/7am-10am?  Do you see a difference in the quantity of bike trips (the size of the circle under the pin)?\n","user":"anonymous","dateUpdated":"2017-07-28T00:55:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Before you continue</h1>\n<p>Experiment with the drop-down choices above. For instance, compare Mon-Fri/7am-10am to Mon-Fri/4pm-7pm. Do you see a difference between where bikes are being picked up (green) and dropped off (red)?</p>\n<p>Or compare Mon-Fri/7am-10am to Weekend/7am-10am? Do you see a difference in the quantity of bike trips (the size of the circle under the pin)?</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273428_-1274251164","id":"20170616-140451_853573525","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T00:55:51+0000","dateFinished":"2017-07-28T00:55:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:399"},{"text":"%md\n# Next Steps\n\nIn our next part of the demonstration, we will use Spark Streaming and Oracle Event Hub Cloud Service to work with bike trip data in \"real-time\".","user":"anonymous","dateUpdated":"2017-07-28T00:56:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":"true","language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Next Steps</h1>\n<p>In our next part of the demonstration, we will use Spark Streaming and Oracle Event Hub Cloud Service to work with bike trip data in &ldquo;real-time&rdquo;.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273429_-1274635913","id":"20170417-143727_1241071598","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T00:56:02+0000","dateFinished":"2017-07-28T00:56:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:400"},{"text":"%md\n### Change Log\nJuly 28, 2017 - Confirmed it works with 17.3.1-20","user":"anonymous","dateUpdated":"2017-07-28T13:26:22+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Change Log</h3>\n<p>July 28, 2017 - Confirmed it works with 17.3.1-20</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1501203273429_-1274635913","id":"20170417-144227_262667642","dateCreated":"2017-07-28T00:54:33+0000","dateStarted":"2017-07-28T13:26:22+0000","dateFinished":"2017-07-28T13:26:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:401"},{"text":"%md\n","user":"anonymous","dateUpdated":"2017-07-28T13:26:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1501248382227_306970911","id":"20170728-132622_170862178","dateCreated":"2017-07-28T13:26:22+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:402"}],"name":"Tutorial 7 Working with Spark and Maps","id":"2CNB5SB17","angularObjects":{"2CQVFQFWU:shared_process":[],"2CRFREMNU:shared_process":[{"name":"BIND_topN","object":"10","noteId":"2CNB5SB17"},{"name":"BIND_dayOfWeek","object":"MonFri","noteId":"2CNB5SB17"},{"name":"topstations","object":[{"ridetype":"Start","station":"Pershing Square North","trips":"Pickups:9642","lat":40.751873,"lon":-73.977706},{"ridetype":"Start","station":"W 21 St & 6 Ave","trips":"Pickups:5990","lat":40.74173969,"lon":-73.99415556},{"ridetype":"Start","station":"E 17 St & Broadway","trips":"Pickups:5802","lat":40.73704984,"lon":-73.99009296},{"ridetype":"Start","station":"Broadway & E 22 St","trips":"Pickups:5420","lat":40.7403432,"lon":-73.98955109},{"ridetype":"Start","station":"Broadway & E 14 St","trips":"Pickups:5342","lat":40.73454567,"lon":-73.99074142},{"ridetype":"Start","station":"8 Ave & W 33 St","trips":"Pickups:5282","lat":40.751551,"lon":-73.993934},{"ridetype":"Start","station":"W 41 St & 8 Ave","trips":"Pickups:4963","lat":40.75640548,"lon":-73.9900262},{"ridetype":"Start","station":"W 52 St & 5 Ave","trips":"Pickups:4822","lat":40.75992262,"lon":-73.97648516},{"ridetype":"Start","station":"Cooper Square & E 7 St","trips":"Pickups:4644","lat":40.72923649910006,"lon":-73.99086803197861},{"ridetype":"Start","station":"8 Ave & W 31 St","trips":"Pickups:4622","lat":40.7505853470215,"lon":-73.9946848154068}],"noteId":"2CNB5SB17"},{"name":"BIND_hourOfDay","object":"Morning","noteId":"2CNB5SB17"},{"name":"stations","object":[{"ridetype":"Start","station":"Pershing Square North","trips":"Pickups:2934","lat":40.751873,"lon":-73.977706,"radius":366.75},{"ridetype":"Start","station":"Penn Station Valet","trips":"Pickups:2021","lat":40.751283596962296,"lon":-73.99692445993422,"radius":252.625},{"ridetype":"Start","station":"W 42 St & Dyer Ave","trips":"Pickups:1665","lat":40.75898481399634,"lon":-73.99379968643188,"radius":208.125},{"ridetype":"Start","station":"E 14 St & Avenue B","trips":"Pickups:1400","lat":40.72938685,"lon":-73.97772429,"radius":175},{"ridetype":"Start","station":"W 31 St & 7 Ave","trips":"Pickups:1388","lat":40.749156,"lon":-73.9916,"radius":173.5},{"ridetype":"Start","station":"W 38 St & 8 Ave","trips":"Pickups:1370","lat":40.75466591,"lon":-73.99138152,"radius":171.25},{"ridetype":"Start","station":"8 Ave & W 31 St","trips":"Pickups:1355","lat":40.7505853470215,"lon":-73.9946848154068,"radius":169.375},{"ridetype":"Start","station":"8 Ave & W 33 St","trips":"Pickups:1325","lat":40.751551,"lon":-73.993934,"radius":165.625},{"ridetype":"Start","station":"E 7 St & Avenue A","trips":"Pickups:1310","lat":40.72621788,"lon":-73.98379855,"radius":163.75},{"ridetype":"Start","station":"E 47 St & Park Ave","trips":"Pickups:1146","lat":40.75510267,"lon":-73.97498696,"radius":143.25},{"ridetype":"End","station":"W 52 St & 5 Ave","trips":"Dropoffs:3332","lat":40.76002262,"lon":-73.97638515999999,"radius":416.5},{"ridetype":"End","station":"Broadway & E 22 St","trips":"Dropoffs:3111","lat":40.7404432,"lon":-73.98945109,"radius":388.875},{"ridetype":"End","station":"Pershing Square North","trips":"Dropoffs:2779","lat":40.75197300000001,"lon":-73.977606,"radius":347.375},{"ridetype":"End","station":"E 47 St & Park Ave","trips":"Dropoffs:1857","lat":40.75520267,"lon":-73.97488695999999,"radius":232.125},{"ridetype":"End","station":"1 Ave & E 68 St","trips":"Dropoffs:1475","lat":40.765105250000005,"lon":-73.95808491,"radius":184.375},{"ridetype":"End","station":"E 17 St & Broadway","trips":"Dropoffs:1417","lat":40.73714984,"lon":-73.98999296,"radius":177.125},{"ridetype":"End","station":"Broadway & Battery Pl","trips":"Dropoffs:1401","lat":40.704733340000004,"lon":-74.01351706,"radius":175.125},{"ridetype":"End","station":"Cooper Square & E 7 St","trips":"Dropoffs:1383","lat":40.729336499100064,"lon":-73.9907680319786,"radius":172.875},{"ridetype":"End","station":"Broadway & W 39 St","trips":"Dropoffs:1346","lat":40.753096410000005,"lon":-73.98711619,"radius":168.25},{"ridetype":"End","station":"W 21 St & 6 Ave","trips":"Dropoffs:1339","lat":40.741839690000006,"lon":-73.99405555999999,"radius":167.375}],"noteId":"2CNB5SB17"}],"2CPRZVQKR:shared_process":[],"2CQWU46XZ:shared_process":[],"2CPKCF4R9:shared_process":[],"2CR7Y2CFK:shared_process":[],"2CQQM64RT:shared_process":[],"2CQX3UW3S:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}