{"paragraphs":[{"text":"%md\n# Twitter play\n\n**Work in Progress**\n\nBe sure to open up the Access Rule \nBe sure to create a topic\n\nBoth of these are described in the OEHCS Tutorial 1\n\n\n /u01/bdcsce/opt/logstash/bin/logstash agent -f /tmp/logstash_test.conf -w 1\n","user":"anonymous","dateUpdated":"2017-08-25T16:49:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Twitter play</h1>\n<p><strong>Work in Progress</strong></p>\n<p>Be sure to open up the Access Rule<br/>Be sure to create a topic</p>\n<p>Both of these are described in the OEHCS Tutorial 1</p>\n<p>/u01/bdcsce/opt/logstash/bin/logstash agent -f /tmp/logstash_test.conf -w 1</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1503580529347_1839445990","id":"20170824-131529_819777562","dateCreated":"2017-08-24T13:15:29+0000","dateStarted":"2017-08-25T16:49:35+0000","dateFinished":"2017-08-25T16:49:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6214"},{"text":"%md\n# Creating a Logstash Configuration file\n\nThe next paragraph will create a logstash configruation file.\n\nBe sure to use your Twitter credentials.  And adjust the keywords accordingly.\n\n","user":"anonymous","dateUpdated":"2017-08-25T16:37:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Creating a Logstash Configuration file</h1>\n<p>The next paragraph will create a logstash configruation file.</p>\n<p>Be sure to use your Twitter credentials. And adjust the keywords accordingly.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1503678981193_2036132751","id":"20170825-163621_479444486","dateCreated":"2017-08-25T16:36:21+0000","dateStarted":"2017-08-25T16:37:04+0000","dateFinished":"2017-08-25T16:37:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6215"},{"title":"Script to create a logstash configuration file","text":"%sh\nCONFFILE=/tmp/logstash_test.conf\ncat > $CONFFILE << EOF\n# @rmoff\n# July 21, 2016\ninput {\n    twitter {\n        # add your auth data\n        consumer_key => \"SsXSFwV2xOmSk4klZE5iT37Na\"\n        consumer_secret => \"sS1yMhTfIG2NkT8v2t6PAUKGBZVLc4W2UarXPocYvel95eOczx\"\n        oauth_token => \"764131916073144320-f8ufwhIcWIFVz88epCHgyq8xnuICrux\"\n        oauth_token_secret => \"4LBFoTkLm6opBVmdqhX6IyiXhmlEcp21BzgU3pokeoj2X\"\n        keywords => [\"citibike\",\"citibikenyc\",\"bikeshare\"]\n        full_tweet => true\n    }\n}\n\nfilter {\n\n\tmutate {\n\t\tadd_field => { \"user_name\" => \"%{[user][name]}\" }\n\t\tadd_field => { \"user_screen_name\" => \"%{[user][screen_name]}\" }\n\t\tadd_field => { \"user_followers_count\" => \"%{[user][followers_count]}\" }\n\t\tadd_field => { \"user_friends_count\" => \"%{[user][friends_count]}\" }\n\t\tadd_field => { \"user_listed_count\" => \"%{[user][listed_count]}\" }\n\t\tadd_field => { \"user_favourites_count\" => \"%{[user][favourites_count]}\" }\n\t\tadd_field => { \"user_statuses_count\" => \"%{[user][statuses_count]}\" }\n\t\tadd_field => { \"user_created_at\" => \"%{[user][created_at]}\" }\t\t\n\t\tadd_field => { \"user_location\" => \"%{[user][location]}\" }\t\t\n\t\tadd_field => { \"user_description\" => \"%{[user][description]}\" }\t\t\n\t\tadd_field => { \"user_time_zone\" => \"%{[user][time_zone]}\" }\t\t\n\t}\n\n\tif [retweeted_status] {\n\t\tmutate {\n\t\t\tadd_field => { \"retweeted_screen_name\" => \"%{[retweeted_status][user][screen_name]}\" }\n\t\t}\n\t}\n\n\n\tif [place] {\n\t\tmutate {\n\t\t\tadd_field => { \"place_name\" => \"%{[place][name]}\" }\n\t\t\tadd_field => { \"place_country\" => \"%{[place][country]}\" }\n\t\t}\n\t}\n\n\truby {\n\t\tcode => 'event[\"hashtags_array\"] = event[\"[entities][hashtags]\"].collect { |m| m[\"text\"] } unless event[\"[entities][hashtags]\"].nil?\n\t\t\t\t event[\"hashtags_list\"] = event[\"hashtags_array\"].join(\",\")  unless event[\"[hashtags_array]\"].nil?\n\t\t\t\t event[\"urls_array\"] = event[\"[entities][urls]\"].collect { |m| m[\"display_url\"] } unless event[\"[entities][urls]\"].nil?\n\t\t\t\t event[\"urls_list\"] = event[\"urls_array\"].join(\",\")  unless event[\"[urls_array]\"].nil?\n\t\t\t\t event[\"user_mentions_screen_name_array\"] = event[\"[entities][user_mentions]\"].collect { |m| m[\"screen_name\"] } unless event[\"[entities][user_mentions]\"].nil?\n\t\t\t\t event[\"user_mentions_screen_name_list\"] = event[\"user_mentions_screen_name_array\"].join(\",\")  unless event[\"[user_mentions_screen_name_array]\"].nil?\n\t\t\t\t event[\"longitude\"] = event[\"coordinates\"][\"coordinates\"][0] unless event[\"[coordinates]\"].nil?\n\t\t\t\t event[\"latitude\"] = event[\"coordinates\"][\"coordinates\"][1] unless event[\"[coordinates]\"].nil?'\n\t}\n}\n\noutput {\n\tkafka  { \n\t\ttopic_id => \"gse00010212-baseball-in\" \n\t\tbootstrap_servers => \"141.144.144.127:6667\"\n\t}\n\n\tstdout { codec => rubydebug }\n}\n\nEOF\ncat $CONFFILE\nchmod a+r $CONFFILE\nls -la $CONFFILE\n","user":"anonymous","dateUpdated":"2017-08-25T16:36:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":"false"},"editorMode":"ace/mode/sh","editorHide":true,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"# @rmoff\n# July 21, 2016\ninput {\n    twitter {\n        # add your auth data\n        consumer_key => \"SsXSFwV2xOmSk4klZE5iT37Na\"\n        consumer_secret => \"sS1yMhTfIG2NkT8v2t6PAUKGBZVLc4W2UarXPocYvel95eOczx\"\n        oauth_token => \"764131916073144320-f8ufwhIcWIFVz88epCHgyq8xnuICrux\"\n        oauth_token_secret => \"4LBFoTkLm6opBVmdqhX6IyiXhmlEcp21BzgU3pokeoj2X\"\n        keywords => [\"citibike\",\"citibikenyc\",\"bikeshare\"]\n        full_tweet => true\n    }\n}\n\nfilter {\n\n\tmutate {\n\t\tadd_field => { \"user_name\" => \"%{[user][name]}\" }\n\t\tadd_field => { \"user_screen_name\" => \"%{[user][screen_name]}\" }\n\t\tadd_field => { \"user_followers_count\" => \"%{[user][followers_count]}\" }\n\t\tadd_field => { \"user_friends_count\" => \"%{[user][friends_count]}\" }\n\t\tadd_field => { \"user_listed_count\" => \"%{[user][listed_count]}\" }\n\t\tadd_field => { \"user_favourites_count\" => \"%{[user][favourites_count]}\" }\n\t\tadd_field => { \"user_statuses_count\" => \"%{[user][statuses_count]}\" }\n\t\tadd_field => { \"user_created_at\" => \"%{[user][created_at]}\" }\t\t\n\t\tadd_field => { \"user_location\" => \"%{[user][location]}\" }\t\t\n\t\tadd_field => { \"user_description\" => \"%{[user][description]}\" }\t\t\n\t\tadd_field => { \"user_time_zone\" => \"%{[user][time_zone]}\" }\t\t\n\t}\n\n\tif [retweeted_status] {\n\t\tmutate {\n\t\t\tadd_field => { \"retweeted_screen_name\" => \"%{[retweeted_status][user][screen_name]}\" }\n\t\t}\n\t}\n\n\n\tif [place] {\n\t\tmutate {\n\t\t\tadd_field => { \"place_name\" => \"%{[place][name]}\" }\n\t\t\tadd_field => { \"place_country\" => \"%{[place][country]}\" }\n\t\t}\n\t}\n\n\truby {\n\t\tcode => 'event[\"hashtags_array\"] = event[\"[entities][hashtags]\"].collect { |m| m[\"text\"] } unless event[\"[entities][hashtags]\"].nil?\n\t\t\t\t event[\"hashtags_list\"] = event[\"hashtags_array\"].join(\",\")  unless event[\"[hashtags_array]\"].nil?\n\t\t\t\t event[\"urls_array\"] = event[\"[entities][urls]\"].collect { |m| m[\"display_url\"] } unless event[\"[entities][urls]\"].nil?\n\t\t\t\t event[\"urls_list\"] = event[\"urls_array\"].join(\",\")  unless event[\"[urls_array]\"].nil?\n\t\t\t\t event[\"user_mentions_screen_name_array\"] = event[\"[entities][user_mentions]\"].collect { |m| m[\"screen_name\"] } unless event[\"[entities][user_mentions]\"].nil?\n\t\t\t\t event[\"user_mentions_screen_name_list\"] = event[\"user_mentions_screen_name_array\"].join(\",\")  unless event[\"[user_mentions_screen_name_array]\"].nil?\n\t\t\t\t event[\"longitude\"] = event[\"coordinates\"][\"coordinates\"][0] unless event[\"[coordinates]\"].nil?\n\t\t\t\t event[\"latitude\"] = event[\"coordinates\"][\"coordinates\"][1] unless event[\"[coordinates]\"].nil?'\n\t}\n}\n\noutput {\n\tkafka  { \n\t\ttopic_id => \"gse00010212-baseball-in\" \n\t\tbootstrap_servers => \"141.144.144.127:6667\"\n\t}\n\n\tstdout { codec => rubydebug }\n}\n\n-rw-rw-r-- 1 zeppelin zeppelin 2632 Aug 25 16:28 /tmp/logstash_test.conf\n"}]},"apps":[],"jobName":"paragraph_1503580568140_131576270","id":"20170824-131608_1114117773","dateCreated":"2017-08-24T13:16:08+0000","dateStarted":"2017-08-25T16:28:52+0000","dateFinished":"2017-08-25T16:28:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6216"},{"text":"%md\n# Run logstash to connect to Twitter and send to OEHCS\n\nOpen up a SSH session on the BDCS-CE Master note.  See the note \"xtra Connecting via SSH\" for steps to do so.\n\nIn the SSH window, type this command:\n\n    /u01/bdcsce/opt/logstash/bin/logstash agent -f /tmp/logstash_test.conf -w 1\n    \n    ","user":"anonymous","dateUpdated":"2017-08-25T16:38:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Run logstash to connect to Twitter and send to OEHCS</h1>\n<p>Open up a SSH session on the BDCS-CE Master note. See the note &ldquo;xtra Connecting via SSH&rdquo; for steps to do so.</p>\n<p>In the SSH window, type this command:</p>\n<pre><code>/u01/bdcsce/opt/logstash/bin/logstash agent -f /tmp/logstash_test.conf -w 1\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1503679030249_-472552671","id":"20170825-163710_492125505","dateCreated":"2017-08-25T16:37:10+0000","dateStarted":"2017-08-25T16:38:18+0000","dateFinished":"2017-08-25T16:38:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6217"},{"text":"%spark\nz.angularBind(\"BIND_ObjectStorage_Container\", \"journeyC\")\nz.angularBind(\"BIND_OEHCS_ConnectionDescriptor\", z.input(\"OEHCS_ConnectionDescriptor\",\"141.144.144.127:6667\"))\nz.angularBind(\"BIND_OEHCS_Topic\", z.input(\"OEHCS_Topic\",\"gse00010212-TutorialOEHCS\"))\n\n//save these for pyspark\nz.put(\"BIND_OEHCS_Topic\", z.angular(\"BIND_OEHCS_Topic\"))\nz.put(\"BIND_OEHCS_ConnectionDescriptor\", z.angular(\"BIND_OEHCS_ConnectionDescriptor\"))\n\n//save these for shell\nscala.tools.nsc.io.File(\"/var/lib/zeppelin/oehcs.sh\").writeAll(\n  \"export ObjectStorage_Container=\\\"\"+z.angular(\"BIND_ObjectStorage_Container\")+\"\\\"\\n\" +\n  \"export OEHCS_ConnectionDescriptor=\\\"\"+z.angular(\"BIND_OEHCS_ConnectionDescriptor\")+\"\\\"\\n\" +\n  \"export OEHCS_Topic=\\\"\"+z.angular(\"BIND_OEHCS_Topic\")+\"\\\"\\n\"\n)\nprintln(\"done\")\n","user":"anonymous","dateUpdated":"2017-08-25T16:02:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":"false"},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{"OEHCS_ConnectionDescriptor":"141.144.144.127:6667","OEHCS_Topic":"gse00010212-baseball-in"},"forms":{"OEHCS_ConnectionDescriptor":{"name":"OEHCS_ConnectionDescriptor","displayName":"OEHCS_ConnectionDescriptor","type":"input","defaultValue":"141.144.144.127:6667","hidden":false,"$$hashKey":"object:6633"},"OEHCS_Topic":{"name":"OEHCS_Topic","displayName":"OEHCS_Topic","type":"input","defaultValue":"gse00010212-TutorialOEHCS","hidden":false,"$$hashKey":"object:6634"}}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"done\n"}]},"apps":[],"jobName":"paragraph_1503580640759_-120126131","id":"20170824-131720_2001055981","dateCreated":"2017-08-24T13:17:20+0000","dateStarted":"2017-08-25T16:02:21+0000","dateFinished":"2017-08-25T16:02:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6218"},{"text":"%spark\n{\n    \n\nimport _root_.kafka.serializer.StringDecoder //http://stackoverflow.com/questions/36397688/sbt-cannot-import-kafka-encoder-decoder-classes\nimport org.apache.spark.streaming._\nimport org.apache.spark.streaming.kafka._\n\n\n println(\"Creating new Streaming Context\")\n val ssc = new StreamingContext(sc, Seconds(5))\n \n val topic = z.angular(\"BIND_OEHCS_Topic\").toString\n println(\"topic:\"+topic)\n val topicsSet = topic.split(\",\").toSet\n \n val brokers=z.angular(\"BIND_OEHCS_ConnectionDescriptor\").toString\n println(\"brokers:\"+brokers)\n val kafkaParams = Map[String, String](\"metadata.broker.list\" -> brokers)\n \n println(\"Creating Kafka DStream\")\n //https://spark.apache.org/docs/1.6.1/streaming-kafka-integration.html\n val messages = KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](\n      ssc, kafkaParams, topicsSet)\n      \n\n println(\"Setting up operations on DStream\")    \n \n //for debugging, you can print the full contents of the first 10 rows of each batch of messages by uncommenting the following\n //messages.print()\n \n messages.foreachRDD(rdd => {\n     //our Kafka data comes in Key,Value format.  we only care about the value, so use a map to extract just the 2nd element\n     var values=rdd.map(kv => kv._2)\n     \n     //for this example, the value is a JSON string.  Let's make a DataFrame out of the JSON strings\n     var df=sqlContext.jsonRDD(values)\n     \n     //df.printSchema()\n     \n     \n     var reccount = df.count()\n     //let's print out the count\n     printf(\"count = %s \\n\",reccount)\n     \n     //check to see if we have any rows...\n     if (reccount >0)  {\n        //let's print the first row\n        println(\"first row \",df.first())\n        \n\n     } \n     \n })\n \n println(\"Starting Streaming Context\")\n ssc.start()\n\n println(\"Will now sleep for a few minutes, before stopping the StreamingContext.  At this point, you should start the producer.\")\n\n //now sleep for 1 minutes.  Parameter is milliseconds\n Thread.sleep(60000)\n\n //stop any active streamingcontexts.  Parameters are boolean stopSparkContext, boolean stopGracefully\n println(\"Stopping Active StreamingContext\")\n StreamingContext.getActive().map(_.stop(false,true))\n\n println(\"done\")\n\n}","user":"anonymous","dateUpdated":"2017-08-25T16:39:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwarning: there was one deprecation warning; re-run with -deprecation for details\nCreating new Streaming Context\ntopic:gse00010212-baseball-in\nbrokers:141.144.144.127:6667\nCreating Kafka DStream\nSetting up operations on DStream\nStarting Streaming Context\nWill now sleep for a few minutes, before stopping the StreamingContext.  At this point, you should start the producer.\ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \ncount = 0 \nStopping Active StreamingContext\ncount = 0 \ncount = 1 \n(first row ,[2017-08-25T16:40:24.000Z,1,null,null,Fri Aug 25 16:40:24 +0000 2017,[WrappedArray([WrappedArray(25, 35),Cambridge]),WrappedArray(),WrappedArray([twitter.com/cyclelandcam/s…,https://twitter.com/cyclelandcam/status/900991227746758657,WrappedArray(106, 129),https://t.co/IpE02GMNC3]),WrappedArray([2507094433,2507094433,WrappedArray(3, 14),Cam Social Ventures,CamSocVent], [4189378222,4189378222,WrappedArray(65, 76),cycle_land,cycle_land])],0,false,low,null,WrappedArray(Cambridge),Cambridge,901122096390180865,901122096390180865,null,null,null,null,null,true,en,null,false,[null,null,Fri Aug 25 08:00:22 +0000 2017,[WrappedArray([WrappedArray(65, 75),Cambridge], [WrappedArray(118, 128),bikeshare]),WrappedArray(),WrappedArray([listings.cycle.land/en/listings/44…,https://listings.cycle.land/en/listings/440155-apollo-bike-cambridge,WrappedArray(94, 117),https://t.co/TIR2irDmhP]),WrappedArray()],0,false,low,null,900991227746758657,900991227746758657,null,null,null,null,null,false,en,null,false,1,false,<a href=\"http://www.hootsuite.com\" rel=\"nofollow\">Hootsuite</a>,Bike of the Week: new to the site - an Apollo mountain bike near #Cambridge train station :)  https://t.co/TIR2irDmhP #bikeshare,false,[false,Fri Feb 24 20:35:40 +0000 2017,true,false,Cambridge branch @cycle_land: bike sharing community. Connecting dreamers, cyclists, sharing enthusiasts, and travellers. Join http://www.cycle.land,221,null,472,null,371,false,835226710798905348,835226710798905348,false,en,6,Cambridge, England,Cycle.land Cambridge,null,F5F8FA,,,false,https://pbs.twimg.com/profile_banners/835226710798905348/1496866081,http://pbs.twimg.com/profile_images/845271045443653633/_DJKqZib_normal.jpg,https://pbs.twimg.com/profile_images/845271045443653633/_DJKqZib_normal.jpg,1DA1F2,C0DEED,DDEEF6,333333,true,false,cyclelandcam,255,null,http://www.cycle.land,null,false]],900991227746758657,900991227746758657,0,false,CamSocVent,[null,null,Fri Aug 25 09:15:35 +0000 2017,WrappedArray(0, 89),[WrappedArray([WrappedArray(9, 19),Cambridge]),WrappedArray(),WrappedArray([twitter.com/cyclelandcam/s…,https://twitter.com/cyclelandcam/status/900991227746758657,WrappedArray(90, 113),https://t.co/IpE02GMNC3]),WrappedArray([4189378222,4189378222,WrappedArray(49, 60),cycle_land,cycle_land])],0,false,low,null,901010155789312000,901010155789312000,null,null,null,null,null,true,en,null,false,[null,null,Fri Aug 25 08:00:22 +0000 2017,[WrappedArray([WrappedArray(65, 75),Cambridge], [WrappedArray(118, 128),bikeshare]),WrappedArray(),WrappedArray([listings.cycle.land/en/listings/44…,https://listings.cycle.land/en/listings/440155-apollo-bike-cambridge,WrappedArray(94, 117),https://t.co/TIR2irDmhP]),WrappedArray()],0,false,low,null,900991227746758657,900991227746758657,null,null,null,null,null,false,en,null,false,1,false,<a href=\"http://www.hootsuite.com\" rel=\"nofollow\">Hootsuite</a>,Bike of the Week: new to the site - an Apollo mountain bike near #Cambridge train station :)  https://t.co/TIR2irDmhP #bikeshare,false,[false,Fri Feb 24 20:35:40 +0000 2017,true,false,Cambridge branch @cycle_land: bike sharing community. Connecting dreamers, cyclists, sharing enthusiasts, and travellers. Join http://www.cycle.land,221,null,472,null,371,false,835226710798905348,835226710798905348,false,en,6,Cambridge, England,Cycle.land Cambridge,null,F5F8FA,,,false,https://pbs.twimg.com/profile_banners/835226710798905348/1496866081,http://pbs.twimg.com/profile_images/845271045443653633/_DJKqZib_normal.jpg,https://pbs.twimg.com/profile_images/845271045443653633/_DJKqZib_normal.jpg,1DA1F2,C0DEED,DDEEF6,333333,true,false,cyclelandcam,255,null,http://www.cycle.land,null,false]],900991227746758657,900991227746758657,1,false,<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>,Visiting #Cambridge for the long weekend? Hire a @cycle_land bike right from the station! https://t.co/IpE02GMNC3,false,[false,Mon May 19 10:43:59 +0000 2014,false,false,Business support for #entrepreneurs and #socents making social or environmental change, in #Cambridge or across the world. Hosted by @CambridgeJBS.,494,null,1390,null,1344,true,2507094433,2507094433,false,en,105,Cambridge, UK,Cam Social Ventures,null,C0DEED,http://abs.twimg.com/images/themes/theme1/bg.png,https://abs.twimg.com/images/themes/theme1/bg.png,false,https://pbs.twimg.com/profile_banners/2507094433/1471009201,http://pbs.twimg.com/profile_images/877178306029867008/2LnitlLe_normal.jpg,https://pbs.twimg.com/profile_images/877178306029867008/2LnitlLe_normal.jpg,FBAE3B,C0DEED,DDEEF6,333333,true,false,CamSocVent,1814,London,http://www.cambridgesocialventures.org,3600,false]],<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>,RT @CamSocVent: Visiting #Cambridge for the long weekend? Hire a @cycle_land bike right from the station! https://t.co/IpE02GMNC3,1503679224475,false,WrappedArray(twitter.com/cyclelandcam/s…),twitter.com/cyclelandcam/s…,[false,Tue Feb 24 09:18:05 +0000 2009,false,false,Science communication meets social innovation. Reformed journalist. Currently: @CamSocVent @Cambridge_Uni. Previously: @ScienceinPublic.,961,null,752,null,1083,true,21740725,21740725,false,en,51,Cambridge, UK | Melbourne, Aus,Tamzin Byrne,null,A3C1AD,http://abs.twimg.com/images/themes/theme6/bg.gif,https://abs.twimg.com/images/themes/theme6/bg.gif,false,https://pbs.twimg.com/profile_banners/21740725/1490635940,http://pbs.twimg.com/profile_images/870757416132128768/VKOWDcH7_normal.jpg,https://pbs.twimg.com/profile_images/870757416132128768/VKOWDcH7_normal.jpg,5B282A,FFFFFF,F6F6F6,333333,false,false,tamzin_byrne,5141,London,http://uk.linkedin.com/in/tamzinbyrne,3600,false],Tue Feb 24 09:18:05 +0000 2009,Science communication meets social innovation. Reformed journalist. Currently: @CamSocVent @Cambridge_Uni. Previously: @ScienceinPublic.,961,752,1083,51,Cambridge, UK | Melbourne, Aus,WrappedArray(CamSocVent, cycle_land),CamSocVent,cycle_land,Tamzin Byrne,tamzin_byrne,5141,London])\ndone\n"}]},"apps":[],"jobName":"paragraph_1503676789156_-37775426","id":"20170825-155949_433875022","dateCreated":"2017-08-25T15:59:49+0000","dateStarted":"2017-08-25T16:39:07+0000","dateFinished":"2017-08-25T16:40:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6219"},{"text":"%sql\nselect user_screen_name, hashtags_list, substring(text,1,200) from realtime_tweets\n","user":"anonymous","dateUpdated":"2017-08-25T16:33:10+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"user_screen_name\thashtags_list\tsubstring(text, 1, 200)\nEdmondChuiHW\t\t@caveatstercorum @CitiBikeNYC Looking forward to pretty pictures!🚲🚲🚲\n"}]},"apps":[],"jobName":"paragraph_1503677388088_-132594987","id":"20170825-160948_212387126","dateCreated":"2017-08-25T16:09:48+0000","dateStarted":"2017-08-25T16:33:11+0000","dateFinished":"2017-08-25T16:33:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6220"},{"text":"%spark\n\n{\n    \n\n import _root_.kafka.serializer.StringDecoder //http://stackoverflow.com/questions/36397688/sbt-cannot-import-kafka-encoder-decoder-classes\n import org.apache.spark.streaming._\n import org.apache.spark.streaming.kafka._\n\n val filebase = \"swift://\"+z.angular(\"BIND_ObjectStorage_Container\")+\".default/citibike/streaming\"\n\n\n println(\"Defining a placeholder empty dataframe for our SQL table structure when we don't have any realtime data\")\n\n //use a sample record to capture the column names and types\n val dummyrec=\"{'Birth Year': '1981', 'Stop Time': '2016-12-01 06:03:36', 'End Station Longitude': '-73.99061728', 'Trip Duration': '214', 'Start Station ID': '447', 'Start Station Longitude': '-73.9851615', 'End Station Latitude': '40.76669671', 'End Station Name': 'W 53 St & 10 Ave', 'Start Time': '2016-12-01 06:00:01', 'Start Station Latitude': '40.76370739', 'End Station ID': '480', 'Bike ID': '16669', 'User Type': 'Subscriber', 'Gender': '1', 'Start Station Name': '8 Ave & W 52 St'}\"\n val dummyRDD = sc.parallelize(dummyrec :: Nil)\n var dummyDf=sqlContext.jsonRDD(dummyRDD)\n //df.printSchema()\n //create a new DF with zero records (but with same column names/types)\n var emptyDF=dummyDf.filter(\"Gender = 'xxx'\")\n //emptyDF.printSchema()\n  \n  \n println(\"Creating new Streaming Context\")\n val ssc = new StreamingContext(sc, Seconds(30))\n \n\n val topic = z.angular(\"BIND_OEHCS_Topic\").toString\n println(\"topic:\"+topic)\n val topicsSet = topic.split(\",\").toSet\n \n val brokers=z.angular(\"BIND_OEHCS_ConnectionDescriptor\").toString\n println(\"brokers:\"+brokers)\n val kafkaParams = Map[String, String](\"metadata.broker.list\" -> brokers)\n\n\n println(\"Creating Kafka DStream\")\n //https://spark.apache.org/docs/1.6.1/streaming-kafka-integration.html\n val messages = KafkaUtils.createDirectStream[String, String, StringDecoder, StringDecoder](\n      ssc, kafkaParams, topicsSet)\n      \n\n println(\"Setting up operations on DStream\")    \n \n //for debugging, you can print the full contents of the first 10 rows of each batch of messages by uncommenting the following\n //messages.print()\n \n messages.foreachRDD(rdd => {\n     //our Kafka data comes in Key,Value format.  we only care about the value, so use a map to extract just the 2nd element\n     var values=rdd.map(kv => kv._2)\n     \n     //for this example, the value is a JSON string.  Let's make a DataFrame out of the JSON strings\n     var df=sqlContext.jsonRDD(values)\n     \n     var reccount = df.count()\n     //let's print out the count\n     //printf(\"count = %s \\n\",reccount)  This will get printed to the Spark log files, not zeppelin\n     \n     //check to see if we have any rows...\n     if (reccount >0) {\n        //let's print the first row\n        //println(\"first row \",df.first()) This will get printed to the Spark log files, not zeppelin\n        \n        //let's define a temptable\n        df.registerTempTable(\"realtime_tweets\")\n        \n        //let's also write this DF to Object Store...\n\n        // save in json format.  the repartition(1) ensures that we write a single output file, which makes sense since we know the output is small\n       // df.repartition(1).write.format(\"json\").mode(\"append\").save(filebase)\n\n\n     } else {\n         //no records.\n         //let's register a df with no data\n        // emptyDF.registerTempTable(\"realtime_bike_trips\")\n     }\n     \n     \n })\n \n println(\"Starting Streaming Context\")\n ssc.start()\n\n println(\"Note: you will need to manually stop this StreamingContext or it will continue forever.  To do so, run: StreamingContext.getActive().map(_.stop(false,true))\")\n println(\"      There is a sample paragraph below that shows you how to do this.\")\n\n println(\"Start of the Consumer done. Go ahead and start the producer if you have not already. With both the Consumer and Producer running, run the Spark SQL queries below and you should see different data every 30 seconds \")\n\n}","user":"anonymous","dateUpdated":"2017-08-25T16:12:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nwarning: there were three deprecation warnings; re-run with -deprecation for details\nDefining a placeholder empty dataframe for our SQL table structure when we don't have any realtime data\nCreating new Streaming Context\ntopic:gse00010212-baseball-in\nbrokers:141.144.144.127:6667\nCreating Kafka DStream\nSetting up operations on DStream\nStarting Streaming Context\nNote: you will need to manually stop this StreamingContext or it will continue forever.  To do so, run: StreamingContext.getActive().map(_.stop(false,true))\n      There is a sample paragraph below that shows you how to do this.\nStart of the Consumer done. Go ahead and start the producer if you have not already. With both the Consumer and Producer running, run the Spark SQL queries below and you should see different data every 30 seconds \n"}]},"apps":[],"jobName":"paragraph_1503677145133_-211405570","id":"20170825-160545_1742860454","dateCreated":"2017-08-25T16:05:45+0000","dateStarted":"2017-08-25T16:12:07+0000","dateFinished":"2017-08-25T16:12:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6221"},{"text":"%spark\n{\n    import org.apache.spark.streaming._\n    println(\"Stopping any active StreamingContext.  May take a minute.\")\n    StreamingContext.getActive().map(_.stop(false,true))\n    println(\"done\")\n}","user":"anonymous","dateUpdated":"2017-08-25T16:33:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Stopping any active StreamingContext.  May take a minute.\ndone\n"}]},"apps":[],"jobName":"paragraph_1503677506918_1414865090","id":"20170825-161146_1502689782","dateCreated":"2017-08-25T16:11:46+0000","dateStarted":"2017-08-25T16:33:23+0000","dateFinished":"2017-08-25T16:34:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6222"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2017-08-25T15:59:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1503676572195_1572708494","id":"20170825-155612_1574917603","dateCreated":"2017-08-25T15:56:12+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:6223"}],"name":"OEHCS Demonstration Twitter with Spark","id":"2CRYTRMH1","angularObjects":{"2CU424UXA:shared_process":[],"2CTNC42UC:shared_process":[],"2CSQFS352:shared_process":[],"2CRHFBYJQ:shared_process":[],"2CT2G6RST:shared_process":[],"2CSNDNYNF:shared_process":[],"2C4U48MY3_spark2:shared_process":[{"name":"BIND_ObjectStorage_Container","object":"journeyC","noteId":"2CRYTRMH1"},{"name":"BIND_OEHCS_ConnectionDescriptor","object":"141.144.144.127:6667","noteId":"2CRYTRMH1"},{"name":"BIND_OEHCS_Topic","object":"gse00010212-baseball-in","noteId":"2CRYTRMH1"}],"2CTPU7MSJ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}