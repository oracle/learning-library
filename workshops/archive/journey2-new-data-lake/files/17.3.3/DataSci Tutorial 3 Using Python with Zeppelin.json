{"paragraphs":[{"text":"%md\n# Leap into the futuristic year 2010 and set PySpark Python intepreter to Python 2.7\n\n`zeppelin.pyspark.python = python2.7`\n","user":"anonymous","dateUpdated":"2017-08-15T19:49:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Leap into the futuristic year 2010 and set PySpark Python intepreter to Python 2.7</h1>\n<p><code>zeppelin.pyspark.python = python2.7</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1502825982473_342261286","id":"20170815-193942_1380854021","dateCreated":"2017-08-15T19:39:42+0000","dateStarted":"2017-08-15T19:49:56+0000","dateFinished":"2017-08-15T19:49:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2587"},{"text":"%sh\n\nwhich python\n","user":"anonymous","dateUpdated":"2017-08-24T12:36:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":"false"},"editorMode":"ace/mode/sh","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"/usr/bin/python\n"}]},"apps":[],"jobName":"paragraph_1502904173009_551473356","id":"20170816-172253_1983652062","dateCreated":"2017-08-16T17:22:53+0000","dateStarted":"2017-08-24T12:36:23+0000","dateFinished":"2017-08-24T12:36:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2588"},{"title":"Execute SQL against Hive table with Spark SQL","text":"%pyspark\n\n# Spark is lazy (https://spark.apache.org/docs/latest/rdd-programming-guide.html#rdd-operations) and won't actually do anything with the next line.\ndf_results = sqlContext.sql(''' SELECT * FROM bike_trips ''')\n\n# Now we're asking for actual results back!  Spark will actually execute this statement (which depends on the previous statement)\nfor record in df_results.take(10):\n    print record","user":"anonymous","dateUpdated":"2017-08-24T12:38:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Row(tripduration=528, starttime=datetime.datetime(2016, 12, 1, 0, 0, 4), stoptime=datetime.datetime(2016, 12, 1, 0, 8, 52), startstationid=u'499', startstationname=u'Broadway & W 60 St', startstationlatitude=u'40.76915505', startstationlongitude=u'-73.98191841', endstationid=u'228', endstationname=u'E 48 St & 3 Ave', endstationlatitude=u'40.7546011026', endstationlongitude=u'-73.971878855', bikeid=26931, usertype=u'Subscriber', birthyear=1964, gender=1)\nRow(tripduration=218, starttime=datetime.datetime(2016, 12, 1, 0, 0, 28), stoptime=datetime.datetime(2016, 12, 1, 0, 4, 6), startstationid=u'3418', startstationname=u'Plaza St West & Flatbush Ave', startstationlatitude=u'40.6750207', startstationlongitude=u'-73.97111473', endstationid=u'3358', endstationname=u'Garfield Pl & 8 Ave', endstationlatitude=u'40.6711978', endstationlongitude=u'-73.97484126', bikeid=27122, usertype=u'Subscriber', birthyear=1955, gender=1)\nRow(tripduration=399, starttime=datetime.datetime(2016, 12, 1, 0, 0, 39), stoptime=datetime.datetime(2016, 12, 1, 0, 7, 19), startstationid=u'297', startstationname=u'E 15 St & 3 Ave', startstationlatitude=u'40.734232', startstationlongitude=u'-73.986923', endstationid=u'345', endstationname=u'W 13 St & 6 Ave', endstationlatitude=u'40.73649403', endstationlongitude=u'-73.99704374', bikeid=19352, usertype=u'Subscriber', birthyear=1985, gender=1)\nRow(tripduration=254, starttime=datetime.datetime(2016, 12, 1, 0, 0, 44), stoptime=datetime.datetime(2016, 12, 1, 0, 4, 59), startstationid=u'405', startstationname=u'Washington St & Gansevoort St', startstationlatitude=u'40.739323', startstationlongitude=u'-74.008119', endstationid=u'358', endstationname=u'Christopher St & Greenwich St', endstationlatitude=u'40.73291553', endstationlongitude=u'-74.00711384', bikeid=20015, usertype=u'Subscriber', birthyear=1982, gender=1)\nRow(tripduration=1805, starttime=datetime.datetime(2016, 12, 1, 0, 0, 54), stoptime=datetime.datetime(2016, 12, 1, 0, 31), startstationid=u'279', startstationname=u'Peck Slip & Front St', startstationlatitude=u'40.707873', startstationlongitude=u'-74.00167', endstationid=u'279', endstationname=u'Peck Slip & Front St', endstationlatitude=u'40.707873', endstationlongitude=u'-74.00167', bikeid=23148, usertype=u'Subscriber', birthyear=1989, gender=1)\nRow(tripduration=483, starttime=datetime.datetime(2016, 12, 1, 0, 1, 13), stoptime=datetime.datetime(2016, 12, 1, 0, 9, 17), startstationid=u'245', startstationname=u'Myrtle Ave & St Edwards St', startstationlatitude=u'40.69327018', startstationlongitude=u'-73.97703874', endstationid=u'372', endstationname=u'Franklin Ave & Myrtle Ave', endstationlatitude=u'40.694528', endstationlongitude=u'-73.958089', bikeid=16140, usertype=u'Subscriber', birthyear=1986, gender=1)\nRow(tripduration=1114, starttime=datetime.datetime(2016, 12, 1, 0, 1, 37), stoptime=datetime.datetime(2016, 12, 1, 0, 20, 12), startstationid=u'470', startstationname=u'W 20 St & 8 Ave', startstationlatitude=u'40.74345335', startstationlongitude=u'-74.00004031', endstationid=u'453', endstationname=u'W 22 St & 8 Ave', endstationlatitude=u'40.74475148', endstationlongitude=u'-73.99915362', bikeid=19997, usertype=u'Subscriber', birthyear=1964, gender=1)\nRow(tripduration=2680, starttime=datetime.datetime(2016, 12, 1, 0, 1, 50), stoptime=datetime.datetime(2016, 12, 1, 0, 46, 30), startstationid=u'3312', startstationname=u'1 Ave & E 94 St', startstationlatitude=u'40.7817212', startstationlongitude=u'-73.94594', endstationid=u'3325', endstationname=u'E 95 St & 3 Ave', endstationlatitude=u'40.7849032', endstationlongitude=u'-73.950503', bikeid=26105, usertype=u'Subscriber', birthyear=None, gender=0)\nRow(tripduration=1967, starttime=datetime.datetime(2016, 12, 1, 0, 1, 52), stoptime=datetime.datetime(2016, 12, 1, 0, 34, 40), startstationid=u'387', startstationname=u'Centre St & Chambers St', startstationlatitude=u'40.71273266', startstationlongitude=u'-74.0046073', endstationid=u'387', endstationname=u'Centre St & Chambers St', endstationlatitude=u'40.71273266', endstationlongitude=u'-74.0046073', bikeid=21348, usertype=u'Customer', birthyear=None, gender=0)\nRow(tripduration=356, starttime=datetime.datetime(2016, 12, 1, 0, 1, 54), stoptime=datetime.datetime(2016, 12, 1, 0, 7, 50), startstationid=u'496', startstationname=u'E 16 St & 5 Ave', startstationlatitude=u'40.73726186', startstationlongitude=u'-73.99238967', endstationid=u'212', endstationname=u'W 16 St & The High Line', endstationlatitude=u'40.74334935', endstationlongitude=u'-74.00681753', bikeid=22517, usertype=u'Subscriber', birthyear=1954, gender=1)\n"}]},"apps":[],"jobName":"paragraph_1502824929609_180562244","id":"20170815-192209_202900474","dateCreated":"2017-08-15T19:22:09+0000","dateStarted":"2017-08-24T12:38:33+0000","dateFinished":"2017-08-24T12:38:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2589"},{"title":"What object is result?","text":"%pyspark\n\n#lets see what df_results is...\ndf_results","user":"anonymous","dateUpdated":"2017-08-24T12:38:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","editorHide":false,"tableHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[tripduration: int, starttime: timestamp, stoptime: timestamp, startstationid: string, startstationname: string, startstationlatitude: string, startstationlongitude: string, endstationid: string, endstationname: string, endstationlatitude: string, endstationlongitude: string, bikeid: int, usertype: string, birthyear: int, gender: int]\n"}]},"apps":[],"jobName":"paragraph_1502824995804_-517079457","id":"20170815-192315_461845309","dateCreated":"2017-08-15T19:23:15+0000","dateStarted":"2017-08-24T12:38:43+0000","dateFinished":"2017-08-24T12:38:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2590"},{"title":"Example of reading a CSV from Object Store","text":"%pyspark\n\n# Let's use the SQL Context and DataFrame Reader to read a CSV file from Object Store.\nbiketrips = sqlContext.read.csv('swift://jww-journeyC.default/citibike/raw/201612-citibike-tripdata.csv', inferSchema=True, header=True, nullValue='NA')\n\n# lets print the resulting DataFrame\nfor record in biketrips.take(5):\n    print record","user":"anonymous","dateUpdated":"2017-08-24T12:38:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Row(Trip Duration=528, Start Time=datetime.datetime(2016, 12, 1, 0, 0, 4), Stop Time=datetime.datetime(2016, 12, 1, 0, 8, 52), Start Station ID=499, Start Station Name=u'Broadway & W 60 St', Start Station Latitude=40.76915505, Start Station Longitude=-73.98191841, End Station ID=228, End Station Name=u'E 48 St & 3 Ave', End Station Latitude=40.7546011026, End Station Longitude=-73.971878855, Bike ID=26931, User Type=u'Subscriber', Birth Year=1964, Gender=1)\nRow(Trip Duration=218, Start Time=datetime.datetime(2016, 12, 1, 0, 0, 28), Stop Time=datetime.datetime(2016, 12, 1, 0, 4, 6), Start Station ID=3418, Start Station Name=u'Plaza St West & Flatbush Ave', Start Station Latitude=40.6750207, Start Station Longitude=-73.97111473, End Station ID=3358, End Station Name=u'Garfield Pl & 8 Ave', End Station Latitude=40.6711978, End Station Longitude=-73.97484126, Bike ID=27122, User Type=u'Subscriber', Birth Year=1955, Gender=1)\nRow(Trip Duration=399, Start Time=datetime.datetime(2016, 12, 1, 0, 0, 39), Stop Time=datetime.datetime(2016, 12, 1, 0, 7, 19), Start Station ID=297, Start Station Name=u'E 15 St & 3 Ave', Start Station Latitude=40.734232, Start Station Longitude=-73.986923, End Station ID=345, End Station Name=u'W 13 St & 6 Ave', End Station Latitude=40.73649403, End Station Longitude=-73.99704374, Bike ID=19352, User Type=u'Subscriber', Birth Year=1985, Gender=1)\nRow(Trip Duration=254, Start Time=datetime.datetime(2016, 12, 1, 0, 0, 44), Stop Time=datetime.datetime(2016, 12, 1, 0, 4, 59), Start Station ID=405, Start Station Name=u'Washington St & Gansevoort St', Start Station Latitude=40.739323, Start Station Longitude=-74.008119, End Station ID=358, End Station Name=u'Christopher St & Greenwich St', End Station Latitude=40.73291553, End Station Longitude=-74.00711384, Bike ID=20015, User Type=u'Subscriber', Birth Year=1982, Gender=1)\nRow(Trip Duration=1805, Start Time=datetime.datetime(2016, 12, 1, 0, 0, 54), Stop Time=datetime.datetime(2016, 12, 1, 0, 31), Start Station ID=279, Start Station Name=u'Peck Slip & Front St', Start Station Latitude=40.707873, Start Station Longitude=-74.00167, End Station ID=279, End Station Name=u'Peck Slip & Front St', End Station Latitude=40.707873, End Station Longitude=-74.00167, Bike ID=23148, User Type=u'Subscriber', Birth Year=1989, Gender=1)\n"}]},"apps":[],"jobName":"paragraph_1502921902776_1875966920","id":"20170816-221822_1872724187","dateCreated":"2017-08-16T22:18:22+0000","dateStarted":"2017-08-24T12:38:53+0000","dateFinished":"2017-08-24T12:39:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2591"},{"title":"Example of making a local Pandas dataframe into a SparkSQL table","text":"%pyspark\n# Let's import sci-kit learn's datasets\nfrom sklearn import datasets\n\n# let's import pandas (http://pandas.pydata.org/)\nimport pandas as pd\n\n### NB! This code below is all running on the local Python driver instance, not the Spark Context.  \n\n# Load the iris dataset from Sci-Kit Learn\niris = datasets.load_iris()\n\n# Turn it into a Pandas DataFrame (local context, not Spark Context)\npdf_iris = pd.DataFrame(iris.data, columns=iris.feature_names)\n\n# Turn the Pandas DataFrame into a Spark DataFrame ready for massively-parallel analysis and processing\ndf_iris = sqlContext.createDataFrame(pdf_iris)\n\n# Register the DataFrame as a temp table for SparkSQL access\ndf_iris.registerTempTable('iris')\n\ndf_iris\n","user":"anonymous","dateUpdated":"2017-08-24T12:39:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[sepal length (cm): double, sepal width (cm): double, petal length (cm): double, petal width (cm): double]\n"}]},"apps":[],"jobName":"paragraph_1502924073600_-1244635651","id":"20170816-225433_1647723643","dateCreated":"2017-08-16T22:54:33+0000","dateStarted":"2017-08-24T12:39:59+0000","dateFinished":"2017-08-24T12:39:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2592"},{"text":"%sql\nSELECT * FROM iris","user":"anonymous","dateUpdated":"2017-08-24T12:40:03+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":true},"scatterChart":{"xAxis":{"name":"sepal length (cm)","index":0,"aggr":"sum"},"yAxis":{"name":"sepal width (cm)","index":1,"aggr":"sum"},"size":{"name":"petal width (cm)","index":3,"aggr":"sum"},"group":{"name":"petal length (cm)","index":2,"aggr":"sum"}}},"keys":[{"name":"sepal length (cm)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"sepal width (cm)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"sepal length (cm)\tsepal width (cm)\tpetal length (cm)\tpetal width (cm)\n5.1\t3.5\t1.4\t0.2\n4.9\t3.0\t1.4\t0.2\n4.7\t3.2\t1.3\t0.2\n4.6\t3.1\t1.5\t0.2\n5.0\t3.6\t1.4\t0.2\n5.4\t3.9\t1.7\t0.4\n4.6\t3.4\t1.4\t0.3\n5.0\t3.4\t1.5\t0.2\n4.4\t2.9\t1.4\t0.2\n4.9\t3.1\t1.5\t0.1\n5.4\t3.7\t1.5\t0.2\n4.8\t3.4\t1.6\t0.2\n4.8\t3.0\t1.4\t0.1\n4.3\t3.0\t1.1\t0.1\n5.8\t4.0\t1.2\t0.2\n5.7\t4.4\t1.5\t0.4\n5.4\t3.9\t1.3\t0.4\n5.1\t3.5\t1.4\t0.3\n5.7\t3.8\t1.7\t0.3\n5.1\t3.8\t1.5\t0.3\n5.4\t3.4\t1.7\t0.2\n5.1\t3.7\t1.5\t0.4\n4.6\t3.6\t1.0\t0.2\n5.1\t3.3\t1.7\t0.5\n4.8\t3.4\t1.9\t0.2\n5.0\t3.0\t1.6\t0.2\n5.0\t3.4\t1.6\t0.4\n5.2\t3.5\t1.5\t0.2\n5.2\t3.4\t1.4\t0.2\n4.7\t3.2\t1.6\t0.2\n4.8\t3.1\t1.6\t0.2\n5.4\t3.4\t1.5\t0.4\n5.2\t4.1\t1.5\t0.1\n5.5\t4.2\t1.4\t0.2\n4.9\t3.1\t1.5\t0.1\n5.0\t3.2\t1.2\t0.2\n5.5\t3.5\t1.3\t0.2\n4.9\t3.1\t1.5\t0.1\n4.4\t3.0\t1.3\t0.2\n5.1\t3.4\t1.5\t0.2\n5.0\t3.5\t1.3\t0.3\n4.5\t2.3\t1.3\t0.3\n4.4\t3.2\t1.3\t0.2\n5.0\t3.5\t1.6\t0.6\n5.1\t3.8\t1.9\t0.4\n4.8\t3.0\t1.4\t0.3\n5.1\t3.8\t1.6\t0.2\n4.6\t3.2\t1.4\t0.2\n5.3\t3.7\t1.5\t0.2\n5.0\t3.3\t1.4\t0.2\n7.0\t3.2\t4.7\t1.4\n6.4\t3.2\t4.5\t1.5\n6.9\t3.1\t4.9\t1.5\n5.5\t2.3\t4.0\t1.3\n6.5\t2.8\t4.6\t1.5\n5.7\t2.8\t4.5\t1.3\n6.3\t3.3\t4.7\t1.6\n4.9\t2.4\t3.3\t1.0\n6.6\t2.9\t4.6\t1.3\n5.2\t2.7\t3.9\t1.4\n5.0\t2.0\t3.5\t1.0\n5.9\t3.0\t4.2\t1.5\n6.0\t2.2\t4.0\t1.0\n6.1\t2.9\t4.7\t1.4\n5.6\t2.9\t3.6\t1.3\n6.7\t3.1\t4.4\t1.4\n5.6\t3.0\t4.5\t1.5\n5.8\t2.7\t4.1\t1.0\n6.2\t2.2\t4.5\t1.5\n5.6\t2.5\t3.9\t1.1\n5.9\t3.2\t4.8\t1.8\n6.1\t2.8\t4.0\t1.3\n6.3\t2.5\t4.9\t1.5\n6.1\t2.8\t4.7\t1.2\n6.4\t2.9\t4.3\t1.3\n6.6\t3.0\t4.4\t1.4\n6.8\t2.8\t4.8\t1.4\n6.7\t3.0\t5.0\t1.7\n6.0\t2.9\t4.5\t1.5\n5.7\t2.6\t3.5\t1.0\n5.5\t2.4\t3.8\t1.1\n5.5\t2.4\t3.7\t1.0\n5.8\t2.7\t3.9\t1.2\n6.0\t2.7\t5.1\t1.6\n5.4\t3.0\t4.5\t1.5\n6.0\t3.4\t4.5\t1.6\n6.7\t3.1\t4.7\t1.5\n6.3\t2.3\t4.4\t1.3\n5.6\t3.0\t4.1\t1.3\n5.5\t2.5\t4.0\t1.3\n5.5\t2.6\t4.4\t1.2\n6.1\t3.0\t4.6\t1.4\n5.8\t2.6\t4.0\t1.2\n5.0\t2.3\t3.3\t1.0\n5.6\t2.7\t4.2\t1.3\n5.7\t3.0\t4.2\t1.2\n5.7\t2.9\t4.2\t1.3\n6.2\t2.9\t4.3\t1.3\n5.1\t2.5\t3.0\t1.1\n5.7\t2.8\t4.1\t1.3\n6.3\t3.3\t6.0\t2.5\n5.8\t2.7\t5.1\t1.9\n7.1\t3.0\t5.9\t2.1\n6.3\t2.9\t5.6\t1.8\n6.5\t3.0\t5.8\t2.2\n7.6\t3.0\t6.6\t2.1\n4.9\t2.5\t4.5\t1.7\n7.3\t2.9\t6.3\t1.8\n6.7\t2.5\t5.8\t1.8\n7.2\t3.6\t6.1\t2.5\n6.5\t3.2\t5.1\t2.0\n6.4\t2.7\t5.3\t1.9\n6.8\t3.0\t5.5\t2.1\n5.7\t2.5\t5.0\t2.0\n5.8\t2.8\t5.1\t2.4\n6.4\t3.2\t5.3\t2.3\n6.5\t3.0\t5.5\t1.8\n7.7\t3.8\t6.7\t2.2\n7.7\t2.6\t6.9\t2.3\n6.0\t2.2\t5.0\t1.5\n6.9\t3.2\t5.7\t2.3\n5.6\t2.8\t4.9\t2.0\n7.7\t2.8\t6.7\t2.0\n6.3\t2.7\t4.9\t1.8\n6.7\t3.3\t5.7\t2.1\n7.2\t3.2\t6.0\t1.8\n6.2\t2.8\t4.8\t1.8\n6.1\t3.0\t4.9\t1.8\n6.4\t2.8\t5.6\t2.1\n7.2\t3.0\t5.8\t1.6\n7.4\t2.8\t6.1\t1.9\n7.9\t3.8\t6.4\t2.0\n6.4\t2.8\t5.6\t2.2\n6.3\t2.8\t5.1\t1.5\n6.1\t2.6\t5.6\t1.4\n7.7\t3.0\t6.1\t2.3\n6.3\t3.4\t5.6\t2.4\n6.4\t3.1\t5.5\t1.8\n6.0\t3.0\t4.8\t1.8\n6.9\t3.1\t5.4\t2.1\n6.7\t3.1\t5.6\t2.4\n6.9\t3.1\t5.1\t2.3\n5.8\t2.7\t5.1\t1.9\n6.8\t3.2\t5.9\t2.3\n6.7\t3.3\t5.7\t2.5\n6.7\t3.0\t5.2\t2.3\n6.3\t2.5\t5.0\t1.9\n6.5\t3.0\t5.2\t2.0\n6.2\t3.4\t5.4\t2.3\n5.9\t3.0\t5.1\t1.8\n"}]},"apps":[],"jobName":"paragraph_1502985602383_-241694674","id":"20170817-160002_234410462","dateCreated":"2017-08-17T16:00:02+0000","dateStarted":"2017-08-24T12:40:03+0000","dateFinished":"2017-08-24T12:40:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2593"},{"text":"%md\n# Machine Learning with Python and Spark\n\nThis example shows running a Spark machine learning algorithm - Generalized Linear Model (glm).\n\nWe will use our citibike data and model tripduration based on age and gender.\n\n","user":"anonymous","dateUpdated":"2017-08-17T16:10:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":"true"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Machine Learning with Python and Spark</h1>\n<p>This example shows running a Spark machine learning algorithm - Generalized Linear Model (glm).</p>\n<p>We will use our citibike data and model tripduration based on age and gender.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1502986118557_-1738235435","id":"20170817-160838_982555209","dateCreated":"2017-08-17T16:08:38+0000","dateStarted":"2017-08-17T16:10:37+0000","dateFinished":"2017-08-17T16:10:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2594"},{"text":"%pyspark\n\ndf_agegender = sqlContext.sql('''SELECT tripduration, (2016-birthyear) AS age, gender FROM bike_trips''')\ndf_training = df_agegender.dropna()\n\nfor record in df_training.take(20):\n    print record","user":"anonymous","dateUpdated":"2017-08-17T18:09:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Row(tripduration=528, age=52, gender=1)\nRow(tripduration=218, age=61, gender=1)\nRow(tripduration=399, age=31, gender=1)\nRow(tripduration=254, age=34, gender=1)\nRow(tripduration=1805, age=27, gender=1)\nRow(tripduration=483, age=30, gender=1)\nRow(tripduration=1114, age=52, gender=1)\nRow(tripduration=356, age=62, gender=1)\nRow(tripduration=298, age=30, gender=1)\nRow(tripduration=315, age=40, gender=1)\nRow(tripduration=735, age=29, gender=1)\nRow(tripduration=361, age=54, gender=1)\nRow(tripduration=128, age=33, gender=1)\nRow(tripduration=1041, age=26, gender=1)\nRow(tripduration=142, age=35, gender=1)\nRow(tripduration=256, age=46, gender=1)\nRow(tripduration=200, age=21, gender=2)\nRow(tripduration=957, age=49, gender=1)\nRow(tripduration=653, age=26, gender=1)\nRow(tripduration=553, age=27, gender=1)\n"}]},"apps":[],"jobName":"paragraph_1502986237505_1475556803","id":"20170817-161037_1773060185","dateCreated":"2017-08-17T16:10:37+0000","dateStarted":"2017-08-17T18:09:11+0000","dateFinished":"2017-08-17T18:09:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2595"},{"text":"%pyspark\n# yay ML stuff\n\n# Import pyspark.sql.functions.col for manipulating data\nfrom pyspark.sql.functions import col\n\n#PySpark ML expects feature vectors as imports so let's use VectorAssembler to turn our dataframe into vectors\nfrom pyspark.ml.feature import VectorAssembler\n\n# Create VectorAssembler Object\nvecAssembler = VectorAssembler(inputCols=['age', 'gender'], outputCol=\"features\")\n\n# Define our transformed dataframe - (not run yet)\ndf_training_vectorized_temp = vecAssembler.transform(df_training)\ndf_training_vectorized = df_training_vectorized_temp.select(col('tripduration').alias('label'), 'features')\n\n# Print some of our new vectorized training dataframe (actually runs!)\nprint '\\n\\ndf_training_vectorized:'\nfor row in df_training_vectorized.take(10):\n    print row\n    \n# import our regression function from the Spark ML library\nfrom pyspark.ml.regression import GeneralizedLinearRegression\n\nglr = GeneralizedLinearRegression(family=\"gaussian\")\nmodel = glr.fit(df_training_vectorized)\n\n# Check our model and predictions\nfitted = model.transform(df_training_vectorized)\nfitted.registerTempTable('fitted')\ndf_training_vectorized_temp.registerTempTable('training')\n\n# Make some UDFs so I can pull the values back out of the DenseVector\nfrom pyspark.sql.types import FloatType\nsqlContext.registerFunction('EFV', lambda x: float(x[0]), FloatType())\nsqlContext.registerFunction('ESV', lambda x: float(x[1]), FloatType())\n\n\ndf_compare = sqlContext.sql('''\n    SELECT\n    prediction,\n    label as tripduration,\n    EFV(features) as age,\n    ESV(features) as gender\n    FROM fitted\n''')\n\nprint '\\n\\ndf_compare:'\nfor row in df_compare.take(10):\n    print row\n\ndf_compare.registerTempTable('compare')","user":"anonymous","dateUpdated":"2017-08-18T16:54:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\ndf_training_vectorized:\nRow(label=528, features=DenseVector([52.0, 1.0]))\nRow(label=218, features=DenseVector([61.0, 1.0]))\nRow(label=399, features=DenseVector([31.0, 1.0]))\nRow(label=254, features=DenseVector([34.0, 1.0]))\nRow(label=1805, features=DenseVector([27.0, 1.0]))\nRow(label=483, features=DenseVector([30.0, 1.0]))\nRow(label=1114, features=DenseVector([52.0, 1.0]))\nRow(label=356, features=DenseVector([62.0, 1.0]))\nRow(label=298, features=DenseVector([30.0, 1.0]))\nRow(label=315, features=DenseVector([40.0, 1.0]))\n\n\ndf_compare:\nRow(prediction=739.2068577724133, tripduration=528, age=52.0, gender=1.0)\nRow(prediction=763.9147413320832, tripduration=218, age=61.0, gender=1.0)\nRow(prediction=681.5551294665167, tripduration=399, age=31.0, gender=1.0)\nRow(prediction=689.7910906530734, tripduration=254, age=34.0, gender=1.0)\nRow(prediction=670.5738478844412, tripduration=1805, age=27.0, gender=1.0)\nRow(prediction=678.8098090709979, tripduration=483, age=30.0, gender=1.0)\nRow(prediction=739.2068577724133, tripduration=1114, age=52.0, gender=1.0)\nRow(prediction=766.660061727602, tripduration=356, age=62.0, gender=1.0)\nRow(prediction=678.8098090709979, tripduration=298, age=30.0, gender=1.0)\nRow(prediction=706.2630130261866, tripduration=315, age=40.0, gender=1.0)\n"}]},"apps":[],"jobName":"paragraph_1502987312758_506030908","id":"20170817-162832_767132633","dateCreated":"2017-08-17T16:28:32+0000","dateStarted":"2017-08-18T16:54:24+0000","dateFinished":"2017-08-18T16:55:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2596"},{"text":"%sql\nSELECT * FROM compare LIMIT 100","user":"anonymous","dateUpdated":"2017-08-21T10:48:04+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":true},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"prediction\ttripduration\tage\tgender\n739.2068577724133\t528\t52.0\t1.0\n763.9147413320832\t218\t61.0\t1.0\n681.5551294665167\t399\t31.0\t1.0\n689.7910906530734\t254\t34.0\t1.0\n670.5738478844412\t1805\t27.0\t1.0\n678.8098090709979\t483\t30.0\t1.0\n739.2068577724133\t1114\t52.0\t1.0\n766.660061727602\t356\t62.0\t1.0\n678.8098090709979\t298\t30.0\t1.0\n706.2630130261866\t315\t40.0\t1.0\n676.064488675479\t735\t29.0\t1.0\n744.6974985634511\t361\t54.0\t1.0\n687.0457702575545\t128\t33.0\t1.0\n667.8285274889224\t1041\t26.0\t1.0\n692.5364110485923\t142\t35.0\t1.0\n722.7349353993\t256\t46.0\t1.0\n721.0362798348024\t200\t21.0\t2.0\n730.9708965858566\t957\t49.0\t1.0\n667.8285274889224\t653\t26.0\t1.0\n670.5738478844412\t553\t27.0\t1.0\n656.8472459068469\t318\t22.0\t1.0\n692.5364110485923\t145\t35.0\t1.0\n687.0457702575545\t873\t33.0\t1.0\n742.9988429989534\t274\t29.0\t2.0\n761.1694209365644\t309\t60.0\t1.0\n741.9521781679322\t214\t53.0\t1.0\n744.6974985634511\t199\t54.0\t1.0\n689.7910906530734\t114\t34.0\t1.0\n747.44281895897\t479\t55.0\t1.0\n654.101925511328\t606\t21.0\t1.0\n689.7910906530734\t308\t34.0\t1.0\n719.9896150037812\t398\t45.0\t1.0\n667.8285274889224\t2169\t26.0\t1.0\n795.1599305138121\t1097\t48.0\t2.0\n689.7910906530734\t976\t34.0\t1.0\n721.0362798348024\t160\t21.0\t2.0\n676.064488675479\t281\t29.0\t1.0\n665.0832070934034\t1249\t25.0\t1.0\n706.2630130261866\t583\t40.0\t1.0\n689.7910906530734\t378\t34.0\t1.0\n719.9896150037812\t258\t45.0\t1.0\n711.7536538172244\t1001\t42.0\t1.0\n833.5944160510765\t284\t62.0\t2.0\n676.064488675479\t260\t29.0\t1.0\n739.2068577724133\t620\t52.0\t1.0\n692.5364110485923\t118\t35.0\t1.0\n673.3191682799602\t375\t28.0\t1.0\n654.101925511328\t251\t21.0\t1.0\n719.9896150037812\t294\t45.0\t1.0\n722.7349353993\t497\t46.0\t1.0\n722.7349353993\t376\t46.0\t1.0\n728.2255761903377\t296\t48.0\t1.0\n733.7162169813755\t411\t50.0\t1.0\n681.5551294665167\t868\t31.0\t1.0\n665.0832070934034\t1748\t25.0\t1.0\n819.8678140734821\t1142\t57.0\t2.0\n651.3566051158091\t640\t20.0\t1.0\n806.1412120958877\t621\t52.0\t2.0\n766.660061727602\t681\t62.0\t1.0\n667.8285274889224\t1496\t26.0\t1.0\n681.5551294665167\t509\t31.0\t1.0\n681.5551294665167\t1652\t31.0\t1.0\n676.064488675479\t313\t29.0\t1.0\n670.5738478844412\t271\t27.0\t1.0\n684.3004498620356\t919\t32.0\t1.0\n687.0457702575545\t388\t33.0\t1.0\n692.5364110485923\t227\t35.0\t1.0\n794.1132656827909\t450\t72.0\t1.0\n687.0457702575545\t1079\t33.0\t1.0\n719.9896150037812\t483\t45.0\t1.0\n673.3191682799602\t656\t28.0\t1.0\n687.0457702575545\t602\t33.0\t1.0\n665.0832070934034\t338\t25.0\t1.0\n695.2817314441112\t1011\t36.0\t1.0\n667.8285274889224\t1309\t26.0\t1.0\n706.2630130261866\t881\t40.0\t1.0\n719.9896150037812\t517\t45.0\t1.0\n687.0457702575545\t318\t33.0\t1.0\n692.5364110485923\t310\t35.0\t1.0\n678.8098090709979\t445\t30.0\t1.0\n667.8285274889224\t327\t26.0\t1.0\n725.4802557948188\t292\t47.0\t1.0\n673.3191682799602\t168\t28.0\t1.0\n659.5925663023656\t640\t23.0\t1.0\n766.660061727602\t593\t62.0\t1.0\n726.5269206258401\t523\t23.0\t2.0\n644.8192994937501\t369\t42.0\t0.0\n676.064488675479\t328\t29.0\t1.0\n733.7162169813755\t302\t50.0\t1.0\n651.3566051158091\t105\t20.0\t1.0\n659.5925663023656\t1141\t23.0\t1.0\n755.6787801455266\t394\t58.0\t1.0\n781.4333285362177\t471\t43.0\t2.0\n689.7910906530734\t119\t34.0\t1.0\n725.4802557948188\t1143\t47.0\t1.0\n687.0457702575545\t1180\t33.0\t1.0\n656.8472459068469\t148\t22.0\t1.0\n723.7816002303213\t617\t22.0\t2.0\n684.3004498620356\t501\t32.0\t1.0\n692.5364110485923\t1556\t35.0\t1.0\n"}]},"apps":[],"jobName":"paragraph_1502993363350_-860755958","id":"20170817-180923_1966141687","dateCreated":"2017-08-17T18:09:23+0000","dateStarted":"2017-08-18T18:00:14+0000","dateFinished":"2017-08-18T18:00:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2597"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2017-08-18T17:59:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1503079195057_-804995307","id":"20170818-175955_1294330865","dateCreated":"2017-08-18T17:59:55+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2598"}],"name":"DataSci Tutorial 3 Using Python with Zeppelin","id":"2CRCM4UJS","angularObjects":{"2CRVP58DM:shared_process":[],"2CRM2EX96:shared_process":[],"2CPQRHH3V:shared_process":[],"2CPXD5YP9:shared_process":[],"2CQ8ZZUM5:shared_process":[],"2CTJ918E3:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CT4FRG8A:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}