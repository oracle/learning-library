{"paragraphs":[{"title":"Overview:  Big Data SQL Workshop","text":"%md\nWelcome to the workshop!  The goal for the workshop is to give you an understanding of how Big Data SQL works.  Specifically, the focus is on Big Data SQL functional capabilities:  how to access data from different sources (hdfs, hive and Kafka), running queries and applying security.  The workshop is deployed on Big Data Lite - which is a single-node environment that includes: Oracle Database 12c, Cloudera Distribution for Apache Hadoop, Big Data Connectors, GoldenGate, Oracle Data Integrator, and much more.  You can [download Big Data Lite from here](http://www.oracle.com/technetwork/database/bigdata-appliance/oracle-bigdatalite-2104726.html).\n\n#### Background ####\nThe workshop is based on information from the NYC Citi Bikes Ridesharing program - [you can see the data here](https://data.cityofnewyork.us/NYC-BigApps/Citi-Bike-System-Data/vsnr-94wk).  A rider picks up a bike from a station anywhere in  the city - takes a trip - and then drops off his/her bike at another station.  The ending station may or may not be the same.  We combine this information with weather data - and then ask questions like:\n\n- Who is using bikes?  \n- Where are they going?  \n- How much time do they spend riding?  \n- Are bikes optimally distributed across stations? \n- How do we ensure that the right bicycle inventory is deployed to various stations? \n \n##### Why Zeppelin? #####\nWe'll answer these questions using this Zeppelin Note.  Why Zeppelin?  Because it makes it easy to jump between different technologies from within a single UI.  You will be running shell scripts, sql scripts, connect to HDFS and running interactive SQL commands.  Zeppelin may not be the best for any one of the tasks (e.g. I would much rather be using SQL Developer for running/debugging SQL) - but it works well for this instructional workshop\n\n#### Workshop Contents ####\nHere are the tasks that you will perform during the workshop:\n\n- Review Bike Station data that was downloaded from NYC OpenData into HDFS.\n- Access this data using Big Data SQL's ORACLE_HDFS driver + Oracle Database 12c JSON features\n- Perform \"mini-ETL\" - save the transformed data as an Oracle Database internal table\n- Bike trips data was downloaded from NYC OpenData into Hive as a partitioned table.  Access that data using Big Data SQL's ORACLE_HIVE driver\n- Use Oracle SQL to answer different q's - seamlessly combining data from the different sources\n- Create an MV and use query rewrite to provide superfast performance\n- Create a Kafka stream to see what is happening with the distribution of bikes at this moment!  Combine the stream with data in Oracle Database\n- Secure data - using Oracle Database row-level security and redaction\n","user":"anonymous","dateUpdated":"2018-03-19T10:05:27-0400","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458164_8382574","id":"20180226-145915_844642768","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T10:05:27-0400","dateFinished":"2018-03-19T10:05:27-0400","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9382","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Welcome to the workshop! The goal for the workshop is to give you an understanding of how Big Data SQL works. Specifically, the focus is on Big Data SQL functional capabilities: how to access data from different sources (hdfs, hive and Kafka), running queries and applying security. The workshop is deployed on Big Data Lite - which is a single-node environment that includes: Oracle Database 12c, Cloudera Distribution for Apache Hadoop, Big Data Connectors, GoldenGate, Oracle Data Integrator, and much more. You can <a href=\"http://www.oracle.com/technetwork/database/bigdata-appliance/oracle-bigdatalite-2104726.html\">download Big Data Lite from here</a>.</p>\n<h4>Background</h4>\n<p>The workshop is based on information from the NYC Citi Bikes Ridesharing program - <a href=\"https://data.cityofnewyork.us/NYC-BigApps/Citi-Bike-System-Data/vsnr-94wk\">you can see the data here</a>. A rider picks up a bike from a station anywhere in the city - takes a trip - and then drops off his/her bike at another station. The ending station may or may not be the same. We combine this information with weather data - and then ask questions like:</p>\n<ul>\n  <li>Who is using bikes?</li>\n  <li>Where are they going?</li>\n  <li>How much time do they spend riding?</li>\n  <li>Are bikes optimally distributed across stations?</li>\n  <li>How do we ensure that the right bicycle inventory is deployed to various stations?</li>\n</ul>\n<h5>Why Zeppelin?</h5>\n<p>We&rsquo;ll answer these questions using this Zeppelin Note. Why Zeppelin? Because it makes it easy to jump between different technologies from within a single UI. You will be running shell scripts, sql scripts, connect to HDFS and running interactive SQL commands. Zeppelin may not be the best for any one of the tasks (e.g. I would much rather be using SQL Developer for running/debugging SQL) - but it works well for this instructional workshop</p>\n<h4>Workshop Contents</h4>\n<p>Here are the tasks that you will perform during the workshop:</p>\n<ul>\n  <li>Review Bike Station data that was downloaded from NYC OpenData into HDFS.</li>\n  <li>Access this data using Big Data SQL&rsquo;s ORACLE_HDFS driver + Oracle Database 12c JSON features</li>\n  <li>Perform &ldquo;mini-ETL&rdquo; - save the transformed data as an Oracle Database internal table</li>\n  <li>Bike trips data was downloaded from NYC OpenData into Hive as a partitioned table. Access that data using Big Data SQL&rsquo;s ORACLE_HIVE driver</li>\n  <li>Use Oracle SQL to answer different q&rsquo;s - seamlessly combining data from the different sources</li>\n  <li>Create an MV and use query rewrite to provide superfast performance</li>\n  <li>Create a Kafka stream to see what is happening with the distribution of bikes at this moment! Combine the stream with data in Oracle Database</li>\n  <li>Secure data - using Oracle Database row-level security and redaction</li>\n</ul>\n</div>"}]}},{"title":"Oracle Database: Reset Workshop (drop tables)","text":"%sh \n\n# reset HOL tables.  Don't worry if you see errors \"table or view does not exist\".\nsqlplus bikes/bigdatasql @/home/oracle/bikes/reset-hol.sql\n\n","user":"anonymous","dateUpdated":"2018-03-19T09:53:50-0400","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458175_5689332","id":"20180226-140532_1445972519","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:53:50-0400","dateFinished":"2018-03-19T09:53:50-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9383"},{"title":"Review Station Information in HDFS","text":"%sh\n\n# setup environment\nshopt -s expand_aliases\n. /u01/app/oracle/product/12.1.0/dbhome_1/bigdatasql/hadoop_cluster.env\n\n# Check out station information in HDFS\nhadoop fs -cat /data/bike-stations/station_information.json | head","user":"anonymous","dateUpdated":"2018-03-19T09:54:14-0400","config":{"tableHide":false,"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{"0":{"graph":{"mode":"table","height":153.25,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458176_-8546377","id":"20180226-135031_724698004","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:54:14-0400","dateFinished":"2018-03-19T09:54:21-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9384"},{"title":"Create Big Data SQL Table Over HDFS Data (JSON)","text":"%jdbc(orcl-bikes) \n-- Create a table over the station data using the ORACLE_HDFS driver\n-- The entire JSON doc is available in the \"doc\" column\n\nCREATE TABLE bikes.stations_ext (\n    doc varchar2(4000)     \t   \n ) \n   ORGANIZATION EXTERNAL \n    ( TYPE ORACLE_HDFS\n      DEFAULT DIRECTORY DEFAULT_DIR\n      LOCATION ('/data/bike-stations')\n    )\nREJECT LIMIT UNLIMITED;","user":"anonymous","dateUpdated":"2018-03-19T09:55:09-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458177_-8931126","id":"20180216-152105_1566465721","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:55:10-0400","dateFinished":"2018-03-19T09:55:10-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9385"},{"title":"Query the Station Data treating JSON as a string","text":"%jdbc(orcl-bikes)\n-- Query station data.  \nselect /*+ monitor */ s.doc\nfrom stations_ext s\nwhere rownum < 10\n;","user":"anonymous","dateUpdated":"2018-03-19T09:55:20-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521466357466_1347408931","id":"20180319-093237_164448806","dateCreated":"2018-03-19T09:32:37-0400","dateStarted":"2018-03-19T09:55:20-0400","dateFinished":"2018-03-19T09:55:21-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9386"},{"title":"Query the Station Data using Oracle SQL JSON Features","text":"%jdbc(orcl-bikes)\n-- Query station data.  \nselect /*+ monitor */ s.doc.station_id,\n       s.doc.name,\n       s.doc.lon as longitude,\n       s.doc.lat as latitude,\n       s.doc.capacity,\n       s.doc.eightd_has_key_dispenser,\n       s.doc.rental_methods,\n       json_value(doc, '$.rental_methods[0]'),\n       json_value(doc, '$.rental_methods[1]')\nfrom stations_ext s\nwhere rownum < 10\n;","user":"anonymous","dateUpdated":"2018-03-19T09:57:00-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458178_-7776880","id":"20180226-143810_539762356","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:57:00-0400","dateFinished":"2018-03-19T09:57:01-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9387"},{"title":"Save the Lookup Table in Oracle Database","text":"%jdbc(orcl-bikes)\n-- Perform some simple ETL :).  Create the STATIONS lookup table in Oracle Database\n\nCREATE TABLE bikes.stations AS\nSELECT to_number(s.doc.station_id) as station_id,\n       s.doc.name as station_name,\n       to_number(s.doc.lon) as longitude,\n       to_number(s.doc.lat) as latitude,\n       to_number(s.doc.capacity) as capacity,\n       s.doc.eightd_has_key_dispenser,\n       s.doc.rental_methods\nFROM stations_ext s\nWHERE s.doc.name not like '%Don''t%';\n\n-- Add a primary key\nALTER TABLE bikes.stations add constraint stations_pk primary key(STATION_ID);\n\n-- Query the table\nSELECT station_id, station_name, rental_methods \nFROM bikes.stations\nWHERE rownum < 10;","user":"anonymous","dateUpdated":"2018-03-19T09:57:18-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458179_-8161628","id":"20180226-143813_1222688668","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:57:18-0400","dateFinished":"2018-03-19T09:57:19-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9388"},{"title":"What Tables are Available in Hive?","text":"%jdbc(orcl-bikes)\n\n-- What is available in Hive? \n-- Take as look at Hive tables thru the Oracle dictionary\n\nSELECT *\nFROM all_hive_tables\nWHERE database_name = 'bikes';\n","user":"anonymous","dateUpdated":"2018-03-19T09:57:28-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458180_-10085373","id":"20180226-143814_1082336356","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:57:28-0400","dateFinished":"2018-03-19T09:57:29-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9389"},{"title":"What are the Hive table columns? ","text":"%jdbc(orcl-bikes)\n\n-- And look at the Hive table columns\nselect * \nfrom all_hive_columns\nwhere database_name = 'bikes'\nand table_name = 'trips';\n","user":"anonymous","dateUpdated":"2018-03-19T09:57:42-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":6,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458181_-10470122","id":"20180226-143814_1960066673","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:57:42-0400","dateFinished":"2018-03-19T09:57:43-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9390"},{"title":"Create Big Data SQL Table Over Bike Trips Using Hive Metadata","text":"%jdbc(orcl-bikes)\n-- You can leveage Hive metadata when creating tables by using ORACLE_HIVE table type\n-- Notice that you do not need to specify a LOCATION, file type, partitioning info\n-- All of this information is pulled directly from the hive metastore\n\nCREATE TABLE bikes.trips \n(\n  trip_duration number,\n  start_time date,\n  start_hour number,\n  stop_time  date,\n  start_station_id number,\n  start_station_name varchar2(100),\n  start_station_latitude number,\n  start_station_longitude number,\n  end_station_id number,\n  end_station_name varchar2(100),\n  end_station_latitude number,\n  end_station_longitude number,\n  bike_id number,\n  user_type varchar2(50),\n  birth_year number,\n  gender number,\n  start_month varchar2(10)\n)  \n  ORGANIZATION EXTERNAL \n    ( TYPE ORACLE_HIVE\n      DEFAULT DIRECTORY DEFAULT_DIR\n      ACCESS PARAMETERS\n      (     \n        com.oracle.bigdata.tablename = bikes.trips\n      )\n    );","user":"anonymous","dateUpdated":"2018-03-19T09:58:06-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458182_-9315875","id":"20180226-143815_812031119","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:58:06-0400","dateFinished":"2018-03-19T09:58:06-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9391"},{"title":"Run Some Simple Queries","text":"%jdbc(orcl-bikes)\n\n-- Query the data.  You are now accessing data using Hive metadata (but Oracle query processing)\n\nSELECT * \nFROM trips\nWHERE rownum < 100;","user":"anonymous","dateUpdated":"2018-03-19T09:58:12-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458184_-11624369","id":"20180301-161738_1385668962","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:58:12-0400","dateFinished":"2018-03-19T09:58:15-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9392"},{"text":"%jdbc(orcl-bikes)\n\n-- About how many bikes are there?  Use approximate count distinct as an efficient way to produce the result.\nSELECT approx_count_distinct(bike_id) \nFROM trips;","user":"anonymous","dateUpdated":"2018-03-19T09:58:25-0400","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458186_-10854871","id":"20180301-161734_1874993110","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:58:25-0400","dateFinished":"2018-03-19T09:58:28-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9393"},{"text":"%jdbc(orcl-bikes)\n\n-- Use Oracle SQL to answer questions :)\n-- Which bikes are most heavily used?\n-- Trip duration is measured in seconds\n-- Why are some bikes getting much heavier usage per trip?\n\nselect \n       bike_id,\n       min(start_time) as first_use,\n       max(start_time) as last_use,\n       count(*) as num_trips,\n       sum(round(trip_duration / 3600, 1)) as hours_used,\n       round(avg(trip_duration) / 60,1) as avg_usage_in_minutes\nfrom trips t \ngroup by bike_id\norder by hours_used desc;\n","user":"anonymous","dateUpdated":"2018-03-19T09:58:40-0400","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458186_-10854871","id":"20180301-161728_1854970654","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:58:40-0400","dateFinished":"2018-03-19T09:58:43-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9394"},{"title":"Combine Data in HDFS with Data in Oracle Database","text":"%jdbc(orcl-bikes)\n-- Bike Information\n-- How often are they used in bad weather?\n-- Combine with weather data in Oracle Database\n-- When it is raining, people do not feel like returning the bikes!\n\nWITH bike_stats as (\n  select \n       bike_id,\n       min(start_time) as first_use,\n       max(start_time) as last_use,\n       count(*) as num_trips,\n       sum(case when precipitation > 0 then 1 else null end) as num_trips_when_precipatating,\n       sum(trip_duration) as trip_duration,\n       sum(case when precipitation > 0 then trip_duration else null end) as duration_when_precipitating\n  from trips t , weather w\n  where to_char(t.start_time, 'YYYY-MM-DD') = w.date_rec\n  group by bike_id\n)\nselect  \n       bike_id,\n       first_use,\n       last_use,\n       num_trips,\n       num_trips_when_precipatating,\n       round(trip_duration / 3600,1) as hours_used,\n       round(duration_when_precipitating / 3600,1) as hours_used_precipitating,\n       round((trip_duration/60) / num_trips, 1) as avg_duration,\n       round((duration_when_precipitating / 60) / num_trips_when_precipatating, 1) as avg_duration_precip\nfrom bike_stats\norder by hours_used_precipitating desc nulls last;\n","user":"anonymous","dateUpdated":"2018-03-19T09:59:26-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458187_-11239620","id":"20180301-164416_1215243498","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:59:26-0400","dateFinished":"2018-03-19T09:59:30-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9395"},{"title":"Logistics - Which bikes were moved?","text":"%jdbc(orcl-bikes)\n\n-- How many bikes were moved?\n-- Their drop off station is not the same as their starting station\n-- Use Oracle SQL time-based calcuations to figure this out\n\nwith bike_start_dest as (\n  select bike_id,\n         start_station_name,\n         end_station_name,\n         lag(end_station_name, 1) over (partition by bike_id order by start_time) as prev_end_station,\n         to_char(start_time, 'MM/DD') as start_day,\n         to_char(start_time, 'HH24:MI') as start_time,\n         to_char(stop_time, 'HH24:MI') as stop_time\n  from trips\n  where start_month = '2017-09'\n)\nselect /*+ monitor */ prev_end_station as moved_from,\n       start_station_name as moved_to,\n       start_day,\n       count(*) as num_bikes_moved\nfrom bike_start_dest\nwhere prev_end_station != start_station_name\ngroup by prev_end_station, start_station_name, start_day\norder by start_day;\n","user":"anonymous","dateUpdated":"2018-03-19T10:00:12-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458188_-13163364","id":"20180301-164420_614524818","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T10:00:12-0400","dateFinished":"2018-03-19T10:00:14-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9396"},{"title":"Use Materialized Views to Improve Performance","text":"%jdbc(orcl-bikes)\n\n-- Create an MV over TRIPS and GENDER tables.  \n-- The data in the MV can live inside or outside of the database.  Here, the data resides\n-- internally in table bikes.mv_station_users\n\nCREATE MATERIALIZED VIEW bikes.mv_station_users \nON PREBUILT TABLE \nENABLE QUERY REWRITE AS (\n  select start_station_id,\n         start_station_name,\n         end_station_id,\n         end_station_name,\n         gender_name,\n         user_type,\n         count(*) as num_trips\n  from trips t, gender g\n  where t.gender = g.gender\n  group by start_station_id,\n         start_station_name,\n         end_station_id,\n         end_station_name,\n         gender_name,\n         user_type\n  );","user":"anonymous","dateUpdated":"2018-03-19T10:03:38-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458189_-13548113","id":"20180301-164421_166978216","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T10:03:38-0400","dateFinished":"2018-03-19T10:03:39-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9397"},{"text":"%jdbc(orcl-bikes)\n\n-- Run a query against the base tables.  The query automatically rewrites to the materialized view.\n\nselect /*+ monitor */ start_station_name,\n       gender_name,\n       count(*)\nfrom trips t, gender g\nwhere t.gender = g.gender\ngroup by start_station_name, gender_name\norder by 1,2\n    ;\n","user":"anonymous","dateUpdated":"2018-03-19T10:03:43-0400","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458189_-13548113","id":"20180301-164421_1701965828","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T10:03:43-0400","dateFinished":"2018-03-19T10:03:43-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9398"},{"title":"Kafka - Start a Stream of Bike Activity","text":"%sh\n# What's happening right now?  How are bikes coming and going from the various stations?\n# Shell script creates a producer that publishes to a kafka topic called \"bike_trip_stream\".  \n# This is simulating bike movement across the stations.\n\necho login to bds1 and run /home/oracle/bikes/src/bikes/kafka/start-kafka-producer.sh\n","user":"anonymous","dateUpdated":"2018-03-19T09:44:05-0400","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458190_-12393866","id":"20180301-165220_221336203","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:44:05-0400","dateFinished":"2018-03-19T09:44:05-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9399"},{"text":"%sh\n# What does a Kafka stream look like?  \n# Create a consumer - so you can see the activity stream\n# Notice the JSON document embedded in the stream\n\necho login to bds1 and run /home/oracle/bikes/src/bikes/kafka/start-kafka-consumer.sh\n","user":"anonymous","dateUpdated":"2018-03-19T09:44:08-0400","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458195_-2005646","id":"20180216-152129_553053263","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:44:08-0400","dateFinished":"2018-03-19T09:44:08-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9400"},{"title":"Create a Hive Table Over the Kafka Stream using the Oracle Kafka driver","text":"%hive(orcl-bikes)\ndrop table if exists bikes.bike_trip_stream;\n\nCREATE EXTERNAL TABLE bikes.bike_trip_stream(\n  topic string,\n  partitionid int,\n  key bigint,\n  value string,\n  offset bigint,\n  timestamptype smallint,\n  timestamp timestamp)\nROW FORMAT SERDE\n  'oracle.hadoop.kafka.hive.KafkaSerDe'\nSTORED BY\n  'oracle.hadoop.kafka.hive.KafkaStorageHandler'\nTBLPROPERTIES (\n  'oracle.kafka.bootstrap.servers'='bds2:9092,bds3:9092,bds4:9092',\n  'oracle.kafka.table.key.type'='long',\n  'oracle.kafka.table.topics'='bike_trip_stream',\n  'oracle.kafka.table.value.type'='string');\n  \n  SELECT * from bikes.bike_trip_stream limit 10;","user":"anonymous","dateUpdated":"2018-03-19T09:46:55-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458197_-4314139","id":"20180305-120721_79164951","dateCreated":"2018-03-18T11:20:58-0400","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9401"},{"title":"Create an Oracle Big Data SQL Table Over the Kafka Topic","text":"%jdbc(orcl-bikes)\n-- Make the current activity available to Oracle Database.\n-- Create the Big Data SQL table over the kafka source\n-- An Oracle Hive table was created previously over the Kafka stream.\n-- This Hive table can be used by other processes in addition to Big Data SQL\n\nCREATE TABLE bikes.bike_trip_stream \n(\n  topic varchar2(50),\n  partitionid number,\n  value varchar2(4000),\n  offset integer,\n  timestamp timestamp,\n  timestamptype integer\n)  \n  ORGANIZATION EXTERNAL \n    ( TYPE ORACLE_HIVE\n      DEFAULT DIRECTORY DEFAULT_DIR\n      ACCESS PARAMETERS\n      (     \n        com.oracle.bigdata.tablename = bikes.bike_trip_stream\n      )\n    );\n","user":"anonymous","dateUpdated":"2018-03-19T09:48:41-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458198_-3159893","id":"20180216-170708_1159544120","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:48:42-0400","dateFinished":"2018-03-19T09:48:42-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9402"},{"title":"Query the Kafka Bike Topic","text":"%jdbc(orcl-bikes)\n\n-- Parse the JSON using 12c features.  See the start time, end time and duration of trips\nSELECT \n  b.value,\n  b.value.start_time, \n  b.value.stop_time,  \n  round(24*60*(to_date(b.value.stop_time,'YYYY-MM-DD HH24:MI:SS') - \n               to_date(b.value.start_time,'YYYY-MM-DD HH24:MI:SS'))) as minutes_duration\nFROM bike_trip_stream b\nWHERE rownum < 100;","user":"anonymous","dateUpdated":"2018-03-19T09:48:53-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458199_-3544642","id":"20180226-140403_287502841","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:48:53-0400","dateFinished":"2018-03-19T09:49:12-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9403"},{"title":"Combine the Kafka Stream with Stations table in Oracle","text":"%jdbc(orcl-bikes)\n-- What is happening right now?  How is the distribution of bikes acrosss the stations?\n-- See how bikes are currently coming and going ...\n\n\nWITH originating AS (\n  select s.station_name as station,\n         count(s.station_name) num_originating\n  from bike_trip_stream b, stations s\n  where b.value.start_station_id = s.station_id\n  group by s.station_name\n  ),\nending AS (\nselect s.station_name as station,\n       count(s.station_name) num_ending\nfrom bike_trip_stream b, stations s\nwhere b.value.end_station_id = s.station_id\ngroup by s.station_name)\nselect o.station,\n       o.num_originating,\n       e.num_ending\nfrom originating o, ending e\nwhere o.station = e.station\n","user":"anonymous","dateUpdated":"2018-03-19T09:49:35-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":true}},"commonSetting":{},"keys":[{"name":"STATION","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"NUM_ORIGINATING","index":1,"aggr":"sum"},{"name":"NUM_ENDING","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458199_-3544642","id":"20180301-170520_246501992","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:49:35-0400","dateFinished":"2018-03-19T09:49:38-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9404"},{"title":"Security - Add Row Level Security","text":"%sh\n\n# You are in charge of Grove Street - don't worry about the other stations.  Add a VPD policy to the trips table.\n\n\n# Review the policy - and then create it\ncat /home/oracle/bikes/security-vpd.sql\nsqlplus system/bigdatasql @/home/oracle/bikes/security-vpd.sql\n","user":"anonymous","dateUpdated":"2018-03-19T09:39:02-0400","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458201_-5853135","id":"20180302-161605_1449491417","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:39:02-0400","dateFinished":"2018-03-19T09:39:07-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9405"},{"text":"%jdbc(orcl-bikes)\n-- Only seeing Activity in Grove Street\n\nSELECT start_station_name, end_station_name, start_month, count(*)\nFROM bikes.trips\nWHERE start_month='2017-01'\nGROUP BY start_station_name, end_station_name, start_month\n;\n","user":"anonymous","dateUpdated":"2018-03-19T09:39:23-0400","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458203_-5083637","id":"20180302-171647_161168647","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:39:23-0400","dateFinished":"2018-03-19T09:39:25-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9406"},{"text":"%jdbc(orcl-bikes)\n\n-- Run the query.  Birth year is visible.\n\nSELECT bike_id, gender, birth_year, user_type\nFROM bikes.trips\nWHERE rownum < 100\n","user":"anonymous","dateUpdated":"2018-03-19T09:39:58-0400","config":{"colWidth":12,"editorMode":"ace/mode/text","results":{},"enabled":true,"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458205_-7392131","id":"20180302-173050_2032019812","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:39:58-0400","dateFinished":"2018-03-19T09:40:00-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9407"},{"title":"Redact Birth Year","text":"%sh\n\n# It is none of your business how old the biker is! ;)  Redact the birth_year\n\n\n# Review the redaction policy - and then create it\ncat /home/oracle/bikes/security-redact.sql\nsqlplus system/bigdatasql @/home/oracle/bikes/security-redact.sql","user":"anonymous","dateUpdated":"2018-03-19T09:40:33-0400","config":{"editorSetting":{"language":"sh","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sh","editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458205_-7392131","id":"20180302-171731_1984776282","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:40:33-0400","dateFinished":"2018-03-19T09:40:34-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9408"},{"text":"%jdbc(orcl-bikes)\n\n-- Run the query.  Age is obfuscated.\n\nSELECT bike_id, gender, birth_year, user_type\nFROM bikes.trips\nWHERE rownum < 100\n","user":"anonymous","dateUpdated":"2018-03-19T09:40:46-0400","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458206_-6237884","id":"20180305-164955_354098848","dateCreated":"2018-03-18T11:20:58-0400","dateStarted":"2018-03-19T09:40:47-0400","dateFinished":"2018-03-19T09:40:48-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9409"},{"text":"%sh\n","dateUpdated":"2018-03-18T11:20:58-0400","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":true,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1521386458208_-20858342","id":"20180305-125953_1068775989","dateCreated":"2018-03-18T11:20:58-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9410"}],"name":"Bikes Workshop","id":"2DAN15862","angularObjects":{"2DAK2PDU7:shared_process":[],"2DBBM5429:shared_process":[],"2DAAMK7H7:shared_process":[],"2DB8TTQCT:shared_process":[],"2DB4RS855:shared_process":[],"2DB1BAARX:shared_process":[],"2D7YGU1U7:shared_process":[],"2D94UAEPN:shared_process":[],"2D9F5FEKA:shared_process":[],"2D9XK9SD7:shared_process":[],"2DA2YA9CN:shared_process":[],"2DAGCMHA9:shared_process":[],"2D943W4TR:shared_process":[],"2D8P6FKZF:shared_process":[],"2D96HQ97J:shared_process":[],"2DAK1MP9H:shared_process":[],"2D88CUGJ8:shared_process":[],"2D89N95JD:shared_process":[],"2D9VDYB22:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}